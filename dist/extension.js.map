{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/config/configurationManager.ts", "../src/auth/authManager.ts", "../src/utils/logger.ts", "../src/api/errorTranslator.ts", "../src/api/taigaApiClient.ts", "../src/services/projectService.ts", "../src/services/userStoryService.ts", "../src/services/issueService.ts", "../src/tree/projectTree.ts", "../src/tree/userStoriesTree.ts", "../src/tree/issuesTree.ts", "../src/commands/registerCommands.ts", "../src/diagnostics/diagnostics.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport { ConfigurationManager } from './config/configurationManager';\nimport { AuthManager } from './auth/authManager';\nimport { createLogger } from './utils/logger';\nimport { TaigaApiClient } from './api/taigaApiClient';\nimport { ProjectService } from './services/projectService';\nimport { UserStoryService } from './services/userStoryService';\nimport { IssueService } from './services/issueService';\nimport { ProjectTreeProvider } from './tree/projectTree';\nimport { UserStoriesTreeProvider } from './tree/userStoriesTree';\nimport { IssuesTreeProvider } from './tree/issuesTree';\nimport { registerCommands } from './commands/registerCommands';\nimport { showDiagnostics } from './diagnostics/diagnostics';\nimport { NormalizedError } from './models/types';\n\nlet activeProject: any | undefined;\nlet activeInstanceName: string | undefined;\n\nexport async function activate(context: vscode.ExtensionContext) {\n  const configMgr = new ConfigurationManager();\n  const currentCfg = configMgr.getEffective();\n  activeInstanceName = currentCfg.activeInstanceName || currentCfg.instances[0]?.name;\n  const logger = createLogger('Taiga', () => configMgr.getEffective().verbose);\n  const authMgr = new AuthManager(context);\n\n  function getActiveInstance() {\n    const cfg = configMgr.getEffective();\n    return cfg.instances.find(i => i.name === activeInstanceName);\n  }\n\n  let api = new TaigaApiClient(getActiveInstance()?.baseUrl || '', async () => {\n    const inst = getActiveInstance();\n    if (!inst) return undefined;\n    // Prefer token from settings if provided; otherwise SecretStorage\n    if (inst.token) return inst.token;\n    return authMgr.getToken(inst.tokenSecretId!);\n  }, undefined, (m) => logger.info(m));\n\n  const projectService = new ProjectService(api);\n  const userStoryService = new UserStoryService(api);\n  const issueService = new IssueService(api);\n  const projectTree = new ProjectTreeProvider(projectService);\n  const storiesTree = new UserStoriesTreeProvider(userStoryService);\n  const issuesTree = new IssuesTreeProvider(issueService);\n\n  vscode.window.registerTreeDataProvider('taigaProjects', projectTree);\n  vscode.window.registerTreeDataProvider('taigaUserStories', storiesTree);\n  vscode.window.registerTreeDataProvider('taigaIssues', issuesTree);\n\n  const commandCtx = {\n  setActiveProject(project: any | undefined) { activeProject = project; storiesTree.setActiveProject(project?.id); issuesTree.setActiveProject(project?.id); },\n    getActiveProject() { return activeProject; },\n    showDiagnostics: () => showDiagnostics({\n      activeInstance: getActiveInstance()?.name,\n      activeProject,\n      projectCount: projectTree.getProjectCount(),\n      storyCount: storiesTree.getStoryCount()\n    }),\n    refreshAll: () => { projectTree.refresh(); storiesTree.refresh(); issuesTree.refresh(); },\n    listInstances: () => configMgr.getEffective().instances,\n    setActiveInstance: (name: string | undefined) => { activeInstanceName = name; commandCtx.refreshAll(); },\n    setTokenForActiveInstance: async () => {\n      const inst = getActiveInstance();\n      if (!inst) { vscode.window.showWarningMessage('No active Taiga instance.'); return; }\n      await authMgr.setToken(inst.tokenSecretId!);\n      commandCtx.refreshAll();\n    },\n    connectWithCredentials: async () => {\n      const inst = getActiveInstance();\n      if (!inst) { vscode.window.showWarningMessage('No active Taiga instance.'); return; }\n      const username = await vscode.window.showInputBox({ prompt: 'Taiga username or email', ignoreFocusOut: true });\n      if (!username) return;\n      const password = await vscode.window.showInputBox({ prompt: 'Taiga password', ignoreFocusOut: true, password: true });\n      if (!password) return;\n      // Build a minimal POST to /auth\n      const authUrl = `${inst.baseUrl.replace(/\\/$/, '')}/auth`;\n      try {\n        const resp = await (globalThis as any).fetch(authUrl, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\n          body: JSON.stringify({ type: 'normal', username: username.trim(), password: password })\n        });\n        const text = await resp.text();\n        let body: any = undefined; try { body = text ? JSON.parse(text) : undefined; } catch { body = text; }\n        if (!resp.ok) {\n          const err: NormalizedError = { category: resp.status === 401 ? 'auth' : 'server', httpStatus: resp.status, message: 'Authentication failed', details: body };\n          vscode.window.showErrorMessage(`Taiga auth failed: ${err.message} (${resp.status})`);\n          return;\n        }\n        const token = body?.auth_token || body?.token || body?.access_token;\n        if (!token) {\n          vscode.window.showErrorMessage('Taiga auth response did not include a token.');\n          return;\n        }\n        await authMgr.setToken(inst.tokenSecretId!, token);\n        vscode.window.showInformationMessage('Connected to Taiga.');\n        commandCtx.refreshAll();\n      } catch (e) {\n        vscode.window.showErrorMessage(`Taiga auth error: ${(e as Error).message}`);\n      }\n    }\n  };\n\n  registerCommands(context, { projects: projectTree, userStories: storiesTree }, commandCtx);\n\n  projectTree.load().then(()=>{\n    if (activeProject) { storiesTree.load(); issuesTree.load(); }\n  });\n\n  logger.info('Taiga extension activated.');\n\n  // React to settings changes\n  configMgr.watch(context);\n  configMgr.onDidChange(() => {\n    const inst = getActiveInstance();\n    // if active instance name changed or baseUrl changed, rebuild API client\n    api = new TaigaApiClient(inst?.baseUrl || '', async () => {\n      if (!inst) return undefined;\n      if (inst.token) return inst.token;\n      return authMgr.getToken(inst.tokenSecretId!);\n    }, undefined, (m) => logger.info(m));\n    // propagate active project if still set\n    storiesTree.setActiveProject(activeProject?.id);\n    issuesTree.setActiveProject(activeProject?.id);\n    // refresh both trees\n    projectTree.refresh();\n    storiesTree.refresh();\n    issuesTree.refresh();\n  });\n}\n\nexport function deactivate() {}\n", "import * as vscode from 'vscode';\n\nexport interface InstanceConfig {\n  name: string;\n  baseUrl: string;\n  authType?: 'token';\n  tokenSecretId?: string; // optional, can derive\n  token?: string; // optional, insecure override from settings\n}\n\nexport interface EffectiveConfig {\n  instances: InstanceConfig[];\n  activeInstanceName?: string;\n  verbose: boolean;\n  maxPageSize: number;\n}\n\nexport class ConfigurationManager {\n  private _onDidChange = new vscode.EventEmitter<EffectiveConfig>();\n  readonly onDidChange = this._onDidChange.event;\n\n  getEffective(): EffectiveConfig {\n    const cfg = vscode.workspace.getConfiguration();\n  const instances = (cfg.get<any[]>('taiga.instances') || []).map((raw: any) => this.normalizeInstance(raw));\n    const activeInstanceName = cfg.get<string>('taiga.activeInstanceName') || undefined;\n    return {\n      instances,\n      activeInstanceName,\n      verbose: !!cfg.get<boolean>('taiga.enableVerboseLogging'),\n      maxPageSize: cfg.get<number>('taiga.maxPageSize') || 50\n    };\n  }\n\n  watch(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration('taiga')) {\n        this._onDidChange.fire(this.getEffective());\n      }\n    }));\n  }\n\n  private normalizeInstance(raw: any): InstanceConfig {\n    return {\n      name: String(raw.name || ''),\n      baseUrl: this.normalizeBaseUrl(String(raw.baseUrl || '')),\n      authType: 'token',\n      tokenSecretId: raw.tokenSecretId || `taiga:${raw.name}:token`,\n      token: raw.token ? String(raw.token) : undefined\n    };\n  }\n\n  private normalizeBaseUrl(rawBaseUrl: string): string {\n    let u = rawBaseUrl.trim().replace(/\\/+$/, '');\n    if (!u) return '';\n    // If there's no '/api' segment at all, append default '/api/v1'\n    const hasApi = /\\/api(\\/|$)/.test(u);\n    if (!hasApi) return `${u}/api/v1`;\n    // If it ends exactly with '/api', append '/v1'\n    if (u.endsWith('/api')) return `${u}/v1`;\n    return u;\n  }\n}\n", "import * as vscode from 'vscode';\n\nexport class AuthManager {\n  constructor(private ctx: vscode.ExtensionContext) {}\n\n  async getToken(secretId: string): Promise<string | undefined> {\n    return this.ctx.secrets.get(secretId);\n  }\n\n  async setToken(secretId: string, value?: string): Promise<string | undefined> {\n    const token = value || await vscode.window.showInputBox({ prompt: 'Enter Taiga API token', ignoreFocusOut: true, password: true });\n    if (!token) return undefined;\n    await this.ctx.secrets.store(secretId, token.trim());\n    return token.trim();\n  }\n}\n", "import * as vscode from 'vscode';\n\nexport interface Logger {\n  info(msg: string): void;\n  warn(msg: string): void;\n  error(msg: string): void;\n  debug(msg: string): void;\n}\n\nexport function createLogger(channelName = 'Taiga', verboseFlag: () => boolean): Logger {\n  const channel = vscode.window.createOutputChannel(channelName);\n  function ts() { return new Date().toISOString(); }\n  function redact(s: string) { return s.replace(/(Bearer\\s+)[A-Za-z0-9._-]+/g, '$1***'); }\n  return {\n    info(msg) { channel.appendLine(`[INFO] ${ts()} ${redact(msg)}`); },\n    warn(msg) { channel.appendLine(`[WARN] ${ts()} ${redact(msg)}`); },\n    error(msg) { channel.appendLine(`[ERROR] ${ts()} ${redact(msg)}`); },\n    debug(msg) { if (verboseFlag()) channel.appendLine(`[DEBUG] ${ts()} ${redact(msg)}`); }\n  };\n}\n", "import { NormalizedError } from '../models/types';\n\nexport function translate(status: number, body: any, networkErr?: Error): NormalizedError {\n  if (networkErr) return { category: 'network', message: networkErr.message };\n  if (status === 401 || status === 403) return { category: 'auth', httpStatus: status, message: body?.detail || 'Unauthorized' };\n  if (status === 404) return { category: 'not_found', httpStatus: status, message: 'Not Found' };\n  if (status === 429) return { category: 'rate_limit', httpStatus: status, message: 'Rate limited' };\n  if ([400, 409, 412, 422].includes(status)) return { category: 'validation', httpStatus: status, message: body?.message || 'Validation error', details: body };\n  if (status >= 500) return { category: 'server', httpStatus: status, message: 'Server error' };\n  return { category: 'unknown', httpStatus: status, message: 'Unexpected response', details: body };\n}\n", "import { translate } from './errorTranslator';\nimport { NormalizedError } from '../models/types';\n\n// Minimal fetch/response typing so we do not rely on DOM lib in tsconfig\nexport interface FetchLikeResponse {\n  ok: boolean;\n  status: number;\n  headers: { forEach(cb: (value: string, key: string) => void): void };\n  text(): Promise<string>;\n}\nexport type FetchLike = (url: string, init: { method: string; headers: Record<string,string> }) => Promise<FetchLikeResponse>;\n\nexport interface GetOptions { query?: Record<string, unknown>; headers?: Record<string, string>; }\n\nexport class TaigaApiClient {\n  private fetchFn: FetchLike;\n  constructor(private baseUrl: string, private tokenProvider: () => Promise<string | undefined>, fetchImpl?: FetchLike, private log?: (msg: string) => void) {\n    this.fetchFn = fetchImpl || (globalThis as any).fetch;\n  }\n\n  async get<T>(path: string, opts: GetOptions = {}): Promise<{ data?: T; error?: NormalizedError; status: number; headers: Record<string,string> }> {\n    if (!this.baseUrl) {\n      this.log?.(`[TaigaApi] No baseUrl configured; skipping GET ${path}`);\n      return { status: 0, headers: {}, error: translate(0, null, new Error('No Taiga baseUrl configured')) };\n    }\n    const token = await this.tokenProvider();\n    const url = this.buildUrl(path, opts.query);\n    this.log?.(`[TaigaApi] GET ${url} (token=${token ? 'present' : 'missing'})`);\n    const headers: Record<string,string> = { Accept: 'application/json', ...(opts.headers || {}) };\n    if (token) headers.Authorization = `Bearer ${token}`;\n    let resp: FetchLikeResponse;\n    try {\n      resp = await this.fetchFn(url, { method: 'GET', headers });\n    } catch (e) {\n      this.log?.(`[TaigaApi] GET ${url} network error: ${(e as Error).message}`);\n      return { status: 0, headers: {}, error: translate(0, null, e as Error) };\n    }\n    let data: unknown = undefined;\n    const text = await resp.text();\n    if (text) {\n      try { data = JSON.parse(text); } catch { data = text; }\n    }\n    if (!resp.ok) {\n      this.log?.(`[TaigaApi] GET ${url} -> ${resp.status}`);\n      return { status: resp.status, headers: this.headerObj(resp), error: translate(resp.status, data) };\n    }\n    this.log?.(`[TaigaApi] GET ${url} -> ${resp.status}`);\n    return { status: resp.status, headers: this.headerObj(resp), data: data as T };\n  }\n\n  private buildUrl(path: string, query?: Record<string, unknown>): string {\n    const base = `${this.baseUrl.replace(/\\/$/, '')}/${path.replace(/^\\//, '')}`;\n    if (!query) return base;\n    const params = Object.entries(query)\n      .filter(([, v]) => v !== undefined && v !== null)\n      .flatMap(([k, v]) => Array.isArray(v) ? v.map(x => [k, x]) : [[k, v]]);\n    if (!params.length) return base;\n    const qs = params.map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join('&');\n    return `${base}?${qs}`;\n  }\n\n  private headerObj(resp: FetchLikeResponse): Record<string,string> {\n    const out: Record<string,string> = {};\n    resp.headers.forEach((value: string, key: string) => { out[key] = value; });\n    return out;\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { Project } from '../models/types';\n\nexport class ProjectService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listProjects(): Promise<Project[]> {\n    const { data, error } = await this.api.get<any>('/projects');\n    if (error || data == null) return [];\n    // Support both array and paginated object shapes\n    if (Array.isArray(data)) return data as Project[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Project[];\n    return [];\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { UserStory } from '../models/types';\n\nexport class UserStoryService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listUserStories(projectId: number): Promise<UserStory[]> {\n    const { data, error } = await this.api.get<any>('/userstories', { query: { project: projectId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as UserStory[];\n    if (Array.isArray((data as any).results)) return (data as any).results as UserStory[];\n    return [];\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { Issue } from '../models/types';\n\nexport class IssueService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listIssues(projectId: number): Promise<Issue[]> {\n    const { data, error } = await this.api.get<any>('/issues', { query: { project: projectId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Issue[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Issue[];\n    return [];\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Project } from '../models/types';\nimport { ProjectService } from '../services/projectService';\n\nexport class ProjectTreeProvider implements vscode.TreeDataProvider<ProjectItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<ProjectItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private projects: Project[] = [];\n  private loading = false;\n\n  constructor(private projectService: ProjectService) {}\n\n  refresh(): void { this.load(); }\n\n  getProjectCount(): number { return this.projects.length; }\n  getProjects(): Project[] { return this.projects; }\n\n  async load(): Promise<void> {\n    if (this.loading) return;\n    this.loading = true;\n    try {\n      this.projects = await this.projectService.listProjects();\n    } finally {\n      this.loading = false;\n      this._onDidChangeTreeData.fire();\n    }\n  }\n\n  getTreeItem(element: ProjectItem): vscode.TreeItem { return element; }\n\n  getChildren(element?: ProjectItem): Promise<ProjectItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading && this.projects.length === 0) {\n      return Promise.resolve([new ProjectItem('Loading...')]);\n    }\n    if (!this.projects.length) {\n      return Promise.resolve([new ProjectItem('No projects (check token/instance)')]);\n    }\n    return Promise.resolve(this.projects.map(p => new ProjectItem(p.name || `Project ${p.id}`, p)));\n  }\n}\n\nexport class ProjectItem extends vscode.TreeItem {\n  project?: Project;\n  constructor(label: string, project?: Project) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.project = project;\n    if (!project) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(project.id);\n    (this as any).tooltip = project.description || project.name || String(project.id);\n    (this as any).contextValue = 'project';\n    (this as any).command = { command: 'taiga.selectProject', title: 'Select Project', arguments: [project] };\n  }\n}\n", "import * as vscode from 'vscode';\nimport { UserStory } from '../models/types';\nimport { UserStoryService } from '../services/userStoryService';\n\nexport class UserStoriesTreeProvider implements vscode.TreeDataProvider<UserStoryItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<UserStoryItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private stories: UserStory[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n\n  constructor(private userStoryService: UserStoryService) {}\n\n  setActiveProject(id?: number) {\n    this.activeProjectId = id;\n    this.refresh();\n  }\n\n  refresh(): void { this.load(); }\n\n  getStoryCount(): number { return this.stories.length; }\n  getStories(): UserStory[] { return this.stories; }\n\n  async load(): Promise<void> {\n    if (this.loading) return;\n    this.loading = true;\n    try {\n      if (this.activeProjectId) {\n        this.stories = await this.userStoryService.listUserStories(this.activeProjectId);\n      } else {\n        this.stories = [];\n      }\n    } finally {\n      this.loading = false;\n      this._onDidChangeTreeData.fire();\n    }\n  }\n\n  getTreeItem(element: UserStoryItem): vscode.TreeItem { return element; }\n\n  getChildren(element?: UserStoryItem): Promise<UserStoryItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) {\n      return Promise.resolve([new UserStoryItem('Loading...')]);\n    }\n    if (!this.activeProjectId) {\n      return Promise.resolve([new UserStoryItem('Select a project to view stories')]);\n    }\n    if (!this.stories.length) {\n      return Promise.resolve([new UserStoryItem('No user stories')]);\n    }\n    return Promise.resolve(this.stories.map(s => new UserStoryItem(`${s.ref ? s.ref + ' ' : ''}${s.subject || 'User Story'}`, s)));\n  }\n}\n\nexport class UserStoryItem extends vscode.TreeItem {\n  story?: UserStory;\n  constructor(label: string, story?: UserStory) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.story = story;\n    if (!story) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(story.id);\n    (this as any).tooltip = story.subject || String(story.id);\n    (this as any).contextValue = 'userStory';\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Issue } from '../models/types';\nimport { IssueService } from '../services/issueService';\n\nexport class IssuesTreeProvider implements vscode.TreeDataProvider<IssueItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<IssueItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private issues: Issue[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n\n  constructor(private issueService: IssueService) {}\n\n  setActiveProject(id?: number) {\n    this.activeProjectId = id;\n    this.refresh();\n  }\n\n  refresh(): void { this.load(); }\n\n  async load(): Promise<void> {\n    if (this.loading) return;\n    this.loading = true;\n    try {\n      if (this.activeProjectId) {\n        this.issues = await this.issueService.listIssues(this.activeProjectId);\n      } else {\n        this.issues = [];\n      }\n    } finally {\n      this.loading = false;\n      this._onDidChangeTreeData.fire();\n    }\n  }\n\n  getTreeItem(element: IssueItem): vscode.TreeItem { return element; }\n\n  getChildren(element?: IssueItem): Promise<IssueItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) return Promise.resolve([new IssueItem('Loading...')]);\n    if (!this.activeProjectId) return Promise.resolve([new IssueItem('Select a project to view issues')]);\n    if (!this.issues.length) return Promise.resolve([new IssueItem('No issues')]);\n    return Promise.resolve(this.issues.map(i => new IssueItem(i.subject || `Issue ${i.id}`, i)));\n  }\n}\n\nexport class IssueItem extends vscode.TreeItem {\n  issue?: Issue;\n  constructor(label: string, issue?: Issue) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.issue = issue;\n    if (!issue) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(issue.id);\n    (this as any).tooltip = issue.subject || String(issue.id);\n    (this as any).contextValue = 'issue';\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Project, InstanceConfig } from '../models/types';\nimport { ProjectTreeProvider } from '../tree/projectTree';\nimport { UserStoriesTreeProvider } from '../tree/userStoriesTree';\n\nexport interface CommandContext {\n  setActiveProject(project: Project | undefined): void;\n  getActiveProject(): Project | undefined;\n  showDiagnostics(): void;\n  refreshAll(): void;\n  listInstances(): InstanceConfig[];\n  setActiveInstance(name: string | undefined): void;\n  setTokenForActiveInstance(): Promise<void>;\n  connectWithCredentials(): Promise<void>;\n}\n\nexport function registerCommands(ctx: vscode.ExtensionContext, _providers: { projects: ProjectTreeProvider; userStories: UserStoriesTreeProvider }, commandCtx: CommandContext) {\n  const disposables: vscode.Disposable[] = [];\n\n  disposables.push(\n    vscode.commands.registerCommand('taiga.refreshAll', () => commandCtx.refreshAll()),\n    vscode.commands.registerCommand('taiga.selectProject', (project: Project) => {\n      commandCtx.setActiveProject(project);\n      commandCtx.refreshAll();\n    }),\n    vscode.commands.registerCommand('taiga.showDiagnostics', () => commandCtx.showDiagnostics()),\n    vscode.commands.registerCommand('taiga.selectInstance', async () => {\n      const items = commandCtx.listInstances().map(i => ({ label: i.name, description: i.baseUrl }));\n      const pick = await vscode.window.showQuickPick(items, { placeHolder: 'Select Taiga instance' });\n      if (pick) { commandCtx.setActiveInstance(pick.label); commandCtx.refreshAll(); }\n    }),\n    vscode.commands.registerCommand('taiga.setToken', async () => { await commandCtx.setTokenForActiveInstance(); }),\n    vscode.commands.registerCommand('taiga.connect', async () => { await commandCtx.connectWithCredentials(); })\n  );\n\n  disposables.forEach(d => ctx.subscriptions.push(d));\n}\n", "import * as vscode from 'vscode';\nimport { Project } from '../models/types';\n\nexport interface DiagnosticsState {\n  activeProject?: Project;\n  projectCount: number;\n  storyCount: number;\n  activeInstance?: string;\n}\n\nexport function showDiagnostics(state: DiagnosticsState) {\n  const lines = [\n    `Active Instance: ${state.activeInstance || 'none'}`,\n    `Active Project: ${state.activeProject ? state.activeProject.name : 'none'}`,\n    `Projects Loaded: ${state.projectCount}`,\n    `User Stories Loaded: ${state.storyCount}`\n  ];\n  vscode.window.showInformationMessage(lines.join('\\n'));\n}\n"],
  "mappings": "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",
  "names": ["vscode", "activeInstanceName", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode"]
}
