{
  "version": 3,
  "sources": ["../src/services/sprintService.ts", "../src/services/taskService.ts", "../src/services/userService.ts", "../src/editors/storyEditor.ts", "../src/editors/taskEditor.ts", "../src/editors/issueEditor.ts", "../src/extension.ts", "../src/config/configurationManager.ts", "../src/auth/authManager.ts", "../src/utils/logger.ts", "../src/api/errorTranslator.ts", "../src/api/taigaApiClient.ts", "../src/services/projectService.ts", "../src/services/userStoryService.ts", "../src/services/issueService.ts", "../src/tree/userStoriesTree.ts", "../src/tree/issuesTree.ts", "../src/tree/epicsTree.ts", "../src/tree/sprintsTree.ts", "../src/services/epicService.ts", "../src/views/controlsView.ts", "../src/commands/registerCommands.ts", "../src/diagnostics/diagnostics.ts", "../src/editors/epicEditor.ts", "../src/editors/sprintEditor.ts"],
  "sourcesContent": ["import { TaigaApiClient } from '../api/taigaApiClient';\nimport { ID, Sprint } from '../models/types';\n\nexport interface CreateSprintInput { projectId: ID; name: string; startDate?: string; endDate?: string; }\nexport interface UpdateSprintInput { name?: string | null; startDate?: string | null; endDate?: string | null; closed?: boolean; }\n\nexport class SprintService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listSprints(projectId: number): Promise<Sprint[]> {\n    const { data, error } = await this.api.get<any>('/milestones', { query: { project: projectId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Sprint[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Sprint[];\n    return [];\n  }\n\n  async createSprint(input: CreateSprintInput): Promise<Sprint | undefined> {\n    const payload: any = { project: input.projectId, name: input.name };\n    if (input.startDate !== undefined) payload.estimated_start = input.startDate;\n    if (input.endDate !== undefined) payload.estimated_finish = input.endDate;\n    const { data, error } = await this.api.post<Sprint>('/milestones', payload);\n    if (error) return undefined;\n    return data as Sprint;\n  }\n\n  async updateSprint(id: ID, input: UpdateSprintInput): Promise<Sprint | undefined> {\n    const payload: any = {};\n    if (input.name !== undefined) payload.name = input.name;\n    if (input.startDate !== undefined) payload.estimated_start = input.startDate;\n    if (input.endDate !== undefined) payload.estimated_finish = input.endDate;\n    if (input.closed !== undefined) payload.closed = input.closed;\n    const { data, error } = await this.api.patch<Sprint>(`/milestones/${id}`, payload);\n    if (error) return undefined;\n    return data as Sprint;\n  }\n\n  async deleteSprint(id: ID): Promise<boolean> {\n    const { status, error } = await this.api.delete(`/milestones/${id}`);\n    return !error && status >= 200 && status < 300;\n  }\n\n  async getSprint(id: ID): Promise<Sprint | undefined> {\n    const { data, error } = await this.api.get<Sprint>(`/milestones/${id}`);\n    if (error) return undefined;\n    return data as Sprint;\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { ID, Task } from '../models/types';\n\nexport interface CreateTaskInput { projectId: ID; userStoryId: ID; subject: string; description?: string; statusId?: ID; assignedTo?: ID; dueDate?: string; tags?: string[]; isBlocked?: boolean; }\nexport interface UpdateTaskInput { subject?: string | null; description?: string | null; statusId?: ID | null; assignedTo?: ID | null; userStoryId?: ID | null; dueDate?: string | null; tags?: string[]; isBlocked?: boolean | null; version?: number; }\n\nexport class TaskService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listTasksByUserStory(userStoryId: number): Promise<Task[]> {\n    const { data, error } = await this.api.get<any>('/tasks', { query: { user_story: userStoryId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Task[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Task[];\n    return [];\n  }\n\n  async listTasksByProject(projectId: number): Promise<Task[]> {\n    const { data, error } = await this.api.get<any>('/tasks', { query: { project: projectId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Task[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Task[];\n    return [];\n  }\n\n  async createTask(input: CreateTaskInput): Promise<Task | undefined> {\n    const payload: any = { project: input.projectId, user_story: input.userStoryId, subject: input.subject };\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    const { data, error } = await this.api.post<Task>('/tasks', payload);\n    if (error) return undefined;\n    return data as Task;\n  }\n\n  async updateTask(id: ID, input: UpdateTaskInput): Promise<Task | undefined> {\n    const payload: any = {};\n    if (input.subject !== undefined) payload.subject = input.subject;\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.userStoryId !== undefined) payload.user_story = input.userStoryId;\n    if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    if (input.version !== undefined) payload.version = input.version;\n    const { data, error } = await this.api.patch<Task>(`/tasks/${id}`, payload);\n    if (error) return undefined;\n    return data as Task;\n  }\n\n  async deleteTask(id: ID): Promise<boolean> {\n    const { status, error } = await this.api.delete(`/tasks/${id}`);\n    return !error && status >= 200 && status < 300;\n  }\n\n  async getTask(id: ID): Promise<Task | undefined> {\n    const { data, error } = await this.api.get<Task>(`/tasks/${id}`);\n    if (error) return undefined;\n    return data as Task;\n  }\n\n  async listTaskStatuses(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string }>> {\n    const { data, error } = await this.api.get<any>('/task-statuses', { query: { project: projectId } });\n    if (error || data == null) return [];\n    const arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    // Deduplicate by id\n    const seen = new Set<string>();\n    const out: Array<{ id: ID; name: string; slug?: string }> = [];\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push({ id: (s as any).id, name: (s as any).name, slug: (s as any).slug }); }\n    }\n    return out;\n  }\n\n  async listTasksNotInStory(projectId: number, userStoryId: number): Promise<Task[]> {\n    const all = await this.listTasksByProject(projectId);\n    const target = String(userStoryId);\n    return (all as any[]).filter((t: any) => String(t?.user_story ?? t?.userStoryId ?? '') !== target);\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { UserRef } from '../models/types';\n\nexport class UserService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listProjectUsers(projectId: number): Promise<UserRef[]> {\n    // Try memberships endpoint first\n    const { data, error } = await this.api.get<any>('/memberships', { query: { project: projectId } });\n    if (!error && data) {\n      const arr = Array.isArray(data) ? data : Array.isArray((data as any).results) ? (data as any).results : [];\n      if (Array.isArray(arr)) {\n        const mapped = arr.map((m: any) => {\n          // Taiga memberships sometimes return user as object, sometimes just an ID\n          const u = (typeof m.user === 'object' && m.user) ? m.user : (typeof m.member === 'object' && m.member) ? m.member : undefined;\n          const id = u?.id ?? m.user ?? m.member;\n          const usernameFromUser = u?.username || u?.user_name || u?.email;\n          const fullNameFromUser = u?.full_name || u?.fullName || u?.user_full_name;\n          // When no embedded user object, memberships often include full_name and user_email\n          const usernameFromMembership = m.user_email || m.email || (typeof id !== 'undefined' ? String(id) : undefined);\n          const fullNameFromMembership = m.full_name || m.user_full_name || undefined;\n          const username = usernameFromUser || usernameFromMembership;\n          const fullName = fullNameFromUser || fullNameFromMembership;\n          return { id, username, fullName } as UserRef;\n        }).filter((u: UserRef) => u.id !== undefined && u.id !== null);\n        if (mapped.length) return mapped;\n      }\n    }\n    // Fallback: users endpoint by project filter\n    const { data: data2 } = await this.api.get<any>('/users', { query: { project: projectId } });\n    const arr2 = Array.isArray(data2) ? data2 : Array.isArray((data2 as any)?.results) ? (data2 as any).results : [];\n    return (arr2 || []).map((u: any) => ({ id: u.id, username: u.username || u.email || String(u.id), fullName: u.full_name || u.fullName } as UserRef));\n  }\n}\n", "import * as vscode from 'vscode';\n// Task editor is loaded dynamically when needed to reduce coupling\nimport { UserStoryService } from '../services/userStoryService';\nimport { EpicService } from '../services/epicService';\nimport { SprintService } from '../services/sprintService';\nimport { UserStory, Epic, Sprint, UserRef } from '../models/types';\nimport { UserService } from '../services/userService';\n\nexport class StoryEditor {\n  static async openForCreate(storyService: UserStoryService, epicService: EpicService, sprintService: SprintService, projectId: number, preselectedEpicIds?: number[], siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaStoryEditor', 'New User Story', vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    // Initial loading placeholder to avoid blank panel while fetching data\n    panel.webview.html = renderLoadingHtml(csp);\n  const epics = await epicService.listEpics(projectId as number);\n  const sprints = await sprintService.listSprints(projectId as number);\n  const userService = new UserService((storyService as any)['api']);\n  const users: UserRef[] = await (async () => { try { return await userService.listProjectUsers(projectId as number); } catch { return []; } })();\n  const statuses = await storyService.listUserStoryStatuses(projectId as number);\n  const [roles, points] = await Promise.all([\n    (async ()=>{ try { return await storyService.listRoles(projectId as number); } catch { return []; } })(),\n    (async ()=>{ try { return await storyService.listPoints(projectId as number); } catch { return []; } })(),\n  ]);\n  panel.webview.html = renderHtml(csp, nonce, { mode: 'create', projectId, epics, sprints, users, statuses, roles, points, preselectedEpicIds, siteBaseUrl, projectSlug });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { subject, description, epicIds, sprintId, statusId, assignedTo, tags, team_requirement, client_requirement, is_blocked, due_date, points } = msg.payload || {};\n        const created = await storyService.createUserStory({ projectId, subject, description, epicIds: Array.isArray(epicIds) ? epicIds : undefined, milestoneId: sprintId, statusId, assignedTo, tags: Array.isArray(tags) ? tags.filter((t:string)=>t && t.trim().length>0) : undefined, teamRequirement: !!team_requirement, clientRequirement: !!client_requirement, isBlocked: !!is_blocked, dueDate: due_date || undefined, points });\n        if (created) { vscode.window.showInformationMessage('User Story created'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll'); }\n        else { await handleTokenError(storyService, 'Creating user story failed'); }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n\n  static async openForEdit(storyService: UserStoryService, epicService: EpicService, sprintService: SprintService, story: UserStory, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaStoryEditor', `Edit Story: ${story.subject || story.id}`, vscode.ViewColumn.Active, { enableScripts: true });\n    const ext2 = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext2) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext2.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext2.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n  // Show loading immediately\n  panel.webview.html = renderLoadingHtml(csp);\n  const pidStr = projectIdOf(story as any);\n  const pidNum = pidStr != null && !isNaN(Number(pidStr)) ? Number(pidStr) : (typeof (story as any)?.projectId === 'number' ? (story as any).projectId : undefined);\n  const epics = await epicService.listEpics(pidNum as number);\n  const sprints = await sprintService.listSprints(pidNum as number);\n  const userService = new UserService((storyService as any)['api']);\n  const users: UserRef[] = await (async () => { try { return await userService.listProjectUsers(pidNum as number); } catch { return []; } })();\n  const statuses = await storyService.listUserStoryStatuses(pidNum as number);\n  const [roles, points] = await Promise.all([\n    (async ()=>{ try { return await storyService.listRoles(pidNum as number); } catch { return []; } })(),\n    (async ()=>{ try { return await storyService.listPoints(pidNum as number); } catch { return []; } })(),\n  ]);\n  const full = await (async () => { try { return await storyService.getUserStory(story.id) || story; } catch { return story; } })();\n  // fetch linked tasks and task statuses for grid\n  const { TaskService } = await import('../services/taskService');\n  const taskService = new TaskService((storyService as any)['api']);\n  const tasks = await (async () => { try { return await taskService.listTasksByUserStory(full.id as number); } catch { return []; } })();\n  const taskStatuses = await (async () => { try { return pidNum ? await taskService.listTaskStatuses(pidNum as number) : []; } catch { return []; } })();\n  panel.webview.html = renderHtml(csp, nonce, { mode: 'edit', story: full, projectId: pidNum as number, epics, sprints, users, statuses, roles, points, siteBaseUrl, projectSlug, linkedTasks: tasks as any[], taskStatuses });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { subject, description, epicIds, sprintId, statusId, assignedTo, tags, team_requirement, client_requirement, is_blocked, due_date, points } = msg.payload || {};\n        const updated = await storyService.updateUserStory(story.id, { subject, description: description ?? null, epicIds: Array.isArray(epicIds) ? epicIds : undefined, milestoneId: sprintId ?? null, statusId: statusId ?? null, assignedTo: assignedTo ?? null, tags: Array.isArray(tags) ? tags.filter((t:string)=>t && t.trim().length>0) : undefined, teamRequirement: team_requirement ?? null, clientRequirement: client_requirement ?? null, isBlocked: is_blocked ?? null, dueDate: due_date ?? null, points, version: (full as any)?.version });\n        if (updated) {\n          vscode.window.showInformationMessage('User Story updated');\n          panel.dispose();\n          vscode.commands.executeCommand('taiga.refreshAll');\n        } else {\n          await handleTokenError(storyService, 'Updating user story failed');\n        }\n      }\n      if (msg.type === 'addExistingTask') {\n        try {\n          const { TaskService } = await import('../services/taskService');\n          const tsvc = new TaskService((storyService as any)['api']);\n          const candidates = await tsvc.listTasksNotInStory(pidNum as number, full.id as number);\n          if (!candidates.length) { vscode.window.showInformationMessage('No available tasks to add.'); return; }\n          const picked = await vscode.window.showQuickPick(candidates.map(t => ({ label: (t as any).subject, description: String((t as any).id), t })), { placeHolder: 'Select a task to link' });\n          if (picked) {\n            await tsvc.updateTask((picked.t as any).id, { userStoryId: full.id as number });\n            const refreshed = await tsvc.listTasksByUserStory(full.id as number);\n            panel.webview.postMessage({ type: 'setLinkedTasks', tasks: refreshed });\n          }\n        } catch {}\n      }\n      if (msg.type === 'createNewTask') {\n        try {\n          await vscode.commands.executeCommand('taiga._openTaskEditorCreate', { projectId: pidNum, storyId: full.id, siteBaseUrl, projectSlug });\n          const { TaskService } = await import('../services/taskService');\n          const tsvc = new TaskService((storyService as any)['api']);\n          const refreshed = await tsvc.listTasksByUserStory(full.id as number);\n          panel.webview.postMessage({ type: 'setLinkedTasks', tasks: refreshed });\n        } catch {}\n      }\n      if (msg.type === 'editTask' && msg.taskId) {\n        try {\n          await vscode.commands.executeCommand('taiga._openTaskEditorEdit', { taskId: Number(msg.taskId), siteBaseUrl, projectSlug });\n        } catch {}\n      }\n      if (msg.type === 'removeTask' && msg.taskId) {\n        try {\n          const { TaskService } = await import('../services/taskService');\n          const tsvc = new TaskService((storyService as any)['api']);\n          await tsvc.updateTask(Number(msg.taskId), { userStoryId: null });\n          const refreshed = await tsvc.listTasksByUserStory(full.id as number);\n          panel.webview.postMessage({ type: 'setLinkedTasks', tasks: refreshed });\n        } catch {}\n      }\n      if (msg.type === 'deleteTask' && msg.taskId) {\n        try {\n          const { TaskService } = await import('../services/taskService');\n          const tsvc = new TaskService((storyService as any)['api']);\n          const ok = await vscode.window.showWarningMessage('Delete this task?', { modal: true }, 'Delete');\n          if (ok === 'Delete') {\n            await tsvc.deleteTask(Number(msg.taskId));\n            const refreshed = await tsvc.listTasksByUserStory(full.id as number);\n            panel.webview.postMessage({ type: 'setLinkedTasks', tasks: refreshed });\n            vscode.commands.executeCommand('taiga.refreshAll');\n          }\n        } catch {}\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n    panel.onDidChangeViewState(async (e) => {\n      if (e.webviewPanel.active) {\n        try {\n          const refreshed = await taskService.listTasksByUserStory(full.id as number);\n          panel.webview.postMessage({ type: 'setLinkedTasks', tasks: refreshed });\n        } catch {}\n      }\n    });\n  }\n}\n\n// Normalize an id-like value (number, string, or object with id/pk) into a string for safe comparisons\nfunction normalizeId(val: any): string | undefined {\n  if (val == null) return undefined;\n  let v: any = val;\n  if (typeof v === 'object') {\n    if ('id' in v) v = (v as any).id;\n    else if ('pk' in v) v = (v as any).pk;\n    else return undefined;\n  }\n  const n = Number(v);\n  return isNaN(n) ? String(v) : String(n);\n}\n\nfunction projectIdOf(obj: any): string | undefined {\n  if (!obj) return undefined;\n  return normalizeId(obj.projectId ?? obj.project_id ?? obj.project);\n}\n\nfunction renderHtml(csp: string, nonce: string, opts: { mode: 'create'|'edit'; projectId?: number; story?: UserStory; epics: Epic[]; sprints: Sprint[]; users?: UserRef[]; statuses?: Array<{ id: number; name: string }>; roles?: Array<{ id:number; name:string; slug?: string; computable?: boolean }>; points?: Array<{ id:number; name?:string; value?: number }>; preselectedEpicIds?: number[]; siteBaseUrl?: string; projectSlug?: string; linkedTasks?: any[]; taskStatuses?: Array<{ id:number; name:string }> }) {\n  const story = opts.story;\n  const subject = story?.subject || '';\n  const description = (story as any)?.description || '';\n  // Build selected epic ids further below; no single epicId used anymore\n  const sprintId = (story as any)?.milestone || story?.milestoneId;\n  const statusId = (story as any)?.status?.id ?? (story as any)?.status ?? '';\n  const assignedId = (story as any)?.assigned_to || (story as any)?.assignedTo;\n  const tags: string[] = Array.isArray((story as any)?.tags) ? (story as any)?.tags.map((t:any)=>String(t??'').replace(/,+$/,'').trim()).filter((t:string)=>t.length>0) : [];\n  // Build set of selected epic ids from story.epics (array) or single epic field\n  const selectedEpicIds = (() => {\n    const s:any = story || {};\n    if (Array.isArray(s.epics)) {\n      return s.epics\n        .map((x:any)=>{\n          if (x == null) return NaN;\n          if (typeof x === 'object') {\n            const v = (x.id ?? x.pk ?? x.ref ?? undefined);\n            const n = Number(v);\n            return isNaN(n) ? NaN : n;\n          }\n          const n = Number(x);\n          return isNaN(n) ? NaN : n;\n        })\n        .filter((n:number)=>!isNaN(n));\n    }\n    const single = s?.epic ?? s?.epicId;\n    const base = (single!=null) ? [Number(single)] : [];\n    if (opts.mode==='create' && Array.isArray(opts.preselectedEpicIds) && opts.preselectedEpicIds.length) {\n      return Array.from(new Set([...base, ...opts.preselectedEpicIds.map(n=>Number(n)).filter(n=>!isNaN(n))]));\n    }\n    return base;\n  })();\n  // De-duplicate epics by id to avoid duplicates across projects/responses\n  const epicsDedup = (() => {\n    const pid = opts.mode==='create' ? String(opts.projectId ?? '') : projectIdOf(story as any);\n    const filtered = (opts.epics || []).filter((e: any) => {\n      const eid = projectIdOf(e);\n      return !pid || !eid || String(eid) === String(pid);\n    });\n    return Array.from(new Map(filtered.map(e => [String((e as any).id), e])).values());\n  })();\n  const epicOptions = epicsDedup.map(e => {\n    const label = (e as any).subject || (e as any).title || (e as any).name || '';\n    const sel = selectedEpicIds.some((id: any) => String(id)===String((e as any).id)) ? ' selected' : '';\n    return `<option value=\"${e.id}\"${sel}>${escapeHtml(label)}</option>`;\n  }).join('');\n  const sProjectId = opts.mode==='create' ? String(opts.projectId ?? '') : projectIdOf(story as any);\n  const sprintsFiltered = Array.from(new Map((opts.sprints || [])\n    .filter((s:any)=> {\n      const sid = projectIdOf(s);\n      return !sProjectId || !sid || String(sid)===String(sProjectId);\n    })\n    .map(s => [String((s as any).id), s])).values());\n  const sprintOptions = ['<option value=\"\">(none)</option>', ...sprintsFiltered.map(s => `<option value=\"${(s as any).id}\" ${sprintId=== (s as any).id?'selected':''}>${escapeHtml((s as any).name || String((s as any).id))}</option>`)].join('');\n  const users = opts.users || [];\n  const userOptions = ['<option value=\"\">Unassigned</option>', ...users.map(u=>`<option value=\"${u.id}\" ${String(assignedId)===String(u.id)?'selected':''}>${escapeHtml(u.fullName || u.username)}</option>`)].join('');\n  const statuses = Array.from(new Map((opts.statuses || []).map(s => [String(s.id), s])).values());\n  const statusOptions = ['<option value=\"\">(none)</option>', ...statuses.map(s=>`<option value=\"${s.id}\" ${String(statusId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const isBlocked = !!(story as any)?.is_blocked || !!(story as any)?.blocked;\n  const storyRef = (story as any)?.ref || (story as any)?.id;\n  const linkedTasks = Array.isArray((opts as any).linkedTasks) ? (opts as any).linkedTasks : [];\n  const taskStatuses = Array.isArray((opts as any).taskStatuses) ? (opts as any).taskStatuses : [];\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);}\n  .loading{opacity:.8; font-style: italic;}\n  .row{display:flex; gap:8px; align-items:center; margin:6px 0;}\n    input[type=text], textarea, select, input[type=date]{width:100%; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, rgba(0,0,0,0.18)); padding: 4px 6px; border-radius: 2px;}\n    @media (prefers-color-scheme: dark){ input[type=text], textarea, select, input[type=date]{ border-color: var(--vscode-input-border, rgba(255,255,255,0.18)); } input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) contrast(1.1); } }\n    @media (prefers-color-scheme: light){ input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: none; } }\n  /* Runtime fallback: if we detect a dark-like background, force invert on the indicator */\n  .darklike input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) brightness(1.2) contrast(1.1); }\n  .actions{display:flex; gap:8px; margin-top:12px;}\n  button{ background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 4px 10px; }\n  button:hover{ background: var(--vscode-button-hoverBackground); }\n  label{min-width:100px;}\n  .header{ display:flex; align-items:center; justify-content: space-between; margin-bottom: 8px; }\n    .right{ display:flex; align-items:center; gap:8px; }\n    .header .right select{ width: 220px; }\n  table.points{ width:100%; border-collapse: collapse; }\n  table.points th, table.points td{ border:1px solid var(--vscode-input-border, rgba(128,128,128,.3)); padding:4px 6px; }\n  table.points td.points-cell input, table.points td.points-cell select { text-align: right; text-align-last: right; width:100%; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, rgba(0,0,0,0.18)); padding: 4px 6px; border-radius: 2px; }\n  /* Linked Tasks list styles (mirrors Epic editor list) */\n  table.list{ width:100%; border-collapse: collapse; margin-top: 12px; table-layout: fixed; }\n  table.list th, table.list td{ border:1px solid var(--vscode-input-border, rgba(128,128,128,.3)); padding:4px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }\n  th.sortable{ cursor:pointer; user-select: none; }\n  th.sortable .dir{ opacity:.6; font-size: 11px; margin-left: 4px; }\n  #taskSearch{ width:220px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, transparent); padding: 4px 6px; border-radius: 2px; }\n  .list-header{ display:flex; align-items:center; justify-content: space-between; margin-top: 16px; }\n  .context-menu{ position:fixed; z-index:9999; background: var(--vscode-editor-background); border:1px solid var(--vscode-widget-border); box-shadow: 0 2px 8px rgba(0,0,0,.2); display:none; }\n  .context-menu button{ display:block; width:100%; text-align:left; padding:6px 10px; background:transparent; border:0; color: var(--vscode-foreground); }\n  .context-menu button:hover{ background: var(--vscode-list-hoverBackground); }\n  .note{ opacity:.8; font-style: italic; font-size: 12px; }\n  tr.closed td{ text-decoration: line-through; color: var(--vscode-disabledForeground, #9aa0a6); opacity: .85; }\n  </style></head>\n  <body>\n  <script nonce=\"${nonce}\">/* detect dark background and mark body for calendar icon contrast */(function(){try{var cs=getComputedStyle(document.body);var bg=cs.getPropertyValue('--vscode-editor-background').trim();function hexToRgb(h){h=h.replace('#','');if(h.length===3)h=h.split('').map(function(c){return c+c;}).join('');var r=parseInt(h.substr(0,2),16),g=parseInt(h.substr(2,2),16),b=parseInt(h.substr(4,2),16);return {r:r,g:g,b:b};}function parseBg(s){if(!s)return null;var m=s.match(/rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)/i);if(m){return {r:+m[1],g:+m[2],b:+m[3]};}if(/^#/.test(s)){return hexToRgb(s);}return null;}var rgb=parseBg(bg);if(rgb){var L=0.2126*rgb.r+0.7152*rgb.g+0.0722*rgb.b; if(L<140){document.body.classList.add('darklike');}}}catch(e){}})();</script>\n  <div id=\"loading\" class=\"loading\" style=\"display:none;\">Loading\u2026</div>\n  <div class=\"header\">\n    <h3 style=\"margin:0;\">${opts.mode === 'create' ? 'Create User Story' : 'Edit User Story'}${opts.mode==='edit' && storyRef ? ` <em style=\"font-weight: normal; opacity: .8;\">#${escapeHtml(String(storyRef))}</em>` : ''}</h3>\n    <div class=\"right\"><label style=\"min-width:auto;\">Assigned to</label><select id=\"assigned\">${userOptions}</select></div>\n  </div>\n  <div class=\"row\"><label>Subject</label><input id=\"subject\" type=\"text\" value=\"${escapeHtml(subject)}\" /></div>\n  <div class=\"row\"><label>Description</label><textarea id=\"desc\" rows=\"6\">${escapeHtml(description)}</textarea></div>\n  <div class=\"row\"><label>Epics</label><select id=\"epic\" multiple size=\"5\">${epicOptions}</select></div>\n  <div class=\"row\"><label>Sprint</label><select id=\"sprint\">${sprintOptions}</select></div>\n  <div class=\"row\"><label>Status</label><select id=\"status\">${statusOptions}</select></div>\n  <div class=\"row\"><label>Due date</label><input id=\"dueDate\" type=\"date\" value=\"${escapeHtml(((story as any)?.due_date || '').toString().slice(0,10))}\" /></div>\n    <div class=\"row\"><label>Flags</label>\n      <div class=\"flags\" style=\"display:flex; gap:8px;\">\n        <button id=\"teamReq\" title=\"Team requirement\">\uD83D\uDC65</button>\n        <button id=\"clientReq\" title=\"Client requirement\">\uD83D\uDC64</button>\n        <button id=\"blocked\" title=\"Blocked\">\u26D4</button>\n      </div>\n    </div>\n  <div class=\"row\"><label>Tags</label><input id=\"tags\" type=\"text\" placeholder=\"Comma-separated\" value=\"${escapeHtml(tags.join(', '))}\" /></div>\n  <div class=\"row\"><label>Story points</label>\n    <div style=\"flex:1;\">\n      <table class=\"points\">\n        <thead><tr><th>Role</th><th>Points</th></tr></thead>\n        <tbody id=\"pointsBody\"></tbody>\n      </table>\n      <div id=\"pointsNote\" class=\"note\" style=\"margin-top: 4px;\">Only computable roles can have story points. Non-computable roles are hidden.</div>\n    </div>\n  </div>\n  ${(() => {\n    const base = (opts as any).siteBaseUrl || '';\n    const slug = (opts as any).projectSlug;\n    let url = '';\n    if (opts.mode === 'edit') {\n      const idPart = String((story as any)?.ref || (story as any)?.id || '');\n      if (base) {\n        url = slug ? `${base}/project/${encodeURIComponent(slug)}/userstory/${idPart}` : `${base}/userstory/${idPart}`;\n      }\n    } else {\n      if (base) {\n        url = slug ? `${base}/project/${encodeURIComponent(slug)}/userstories` : `${base}/userstories`;\n      }\n    }\n    const linkHtml = url ? ` (<a href=\"${url}\" target=\"_blank\">${escapeHtml(url)}</a>)` : '';\n    return `<div class=\\\"row\\\"><label></label><div class=\\\"note\\\">Comments can be edited in Taiga interface only${linkHtml}</div></div>`;\n  })()}\n  <div class=\"actions\">\n    <button id=\"save\">Save</button>\n    <button id=\"cancel\">Cancel</button>\n  </div>\n  ${opts.mode==='edit' ? `\n  <div class=\"list-header\">\n    <h4 style=\"margin:6px 0;\">Linked Tasks</h4>\n    <div class=\"right\">\n      <input id=\"taskSearch\" type=\"text\" placeholder=\"Search...\" />\n      <button id=\"addExistingTask\">Add existing\u2026</button>\n      <button id=\"createNewTask\">Create a new task\u2026</button>\n    </div>\n  </div>\n  <table class=\"list\">\n    <thead><tr>\n      <th class=\"sortable\" data-key=\"id\" style=\"width:90px;\">ID <span class=\"dir\" id=\"dir2-id\"></span></th>\n      <th class=\"sortable\" data-key=\"name\">Name <span class=\"dir\" id=\"dir2-name\"></span></th>\n      <th class=\"sortable\" data-key=\"assigned\" style=\"width:200px;\">Assigned to <span class=\"dir\" id=\"dir2-assigned\"></span></th>\n      <th class=\"sortable\" data-key=\"status\" style=\"width:160px;\">Status <span class=\"dir\" id=\"dir2-status\"></span></th>\n    </tr></thead>\n    <tbody id=\"tasksBody\"></tbody>\n  </table>\n  <div id=\"tmenu\" class=\"context-menu\"></div>\n  ` : ''}\n  <script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const __users = ${JSON.stringify(users)};\n  const __taskStatuses = ${JSON.stringify(taskStatuses)};\n  let __tasks = Array.isArray(${JSON.stringify(linkedTasks)}) ? ${JSON.stringify(linkedTasks)} : [];\n  let __tSortKey = 'id';\n  let __tSortDir = 'asc';\n  let __tSearch = '';\n  function computeTaskRows(){\n    function toRow(t){\n      const dataId = t && t.id;\n      const displayId = (t && (t.ref!=null ? t.ref : t.id));\n      const name = (t && t.subject) || '';\n      const assignedId = (t && (t.assigned_to!=null ? t.assigned_to : t.assignedTo));\n      const assigned = __users.find(u=>String(u.id)===String(assignedId)) || {};\n      const assignedName = assigned.fullName || assigned.username || '';\n      const statusId = (t && (t.status && t.status.id || t.status || t.statusId));\n      const st = __taskStatuses.find(ss=>String(ss.id)===String(statusId)) || {};\n      const statusName = st.name || (statusId||'');\n      const slug = (st && (st.slug || '')) || '';\n      const low = String(slug || statusName).toLowerCase();\n      // Robust closed detection: prefer explicit flags, then fall back to text heuristics\n      const closedByText = /\\b(closed|done|completed|resolved|archived)\\b/.test(low);\n      const isClosed = Boolean((st && (st.is_closed || st.isClosed)) || (t && (t.is_closed || t.closed)) || closedByText);\n      return { dataId, displayId, name, assignedName, statusName, raw: t, closed: isClosed };\n    }\n    let rows = __tasks.map(toRow);\n    if (__tSearch && __tSearch.trim().length){\n      const q = __tSearch.trim().toLowerCase();\n      rows = rows.filter(r => String(r.displayId).toLowerCase().includes(q) || String(r.name).toLowerCase().includes(q) || String(r.assignedName).toLowerCase().includes(q) || String(r.statusName).toLowerCase().includes(q));\n    }\n    const cmp = (a,b)=>{\n      // Always push closed rows to the bottom regardless of secondary sort\n      const ca = a.closed ? 1 : 0;\n      const cb = b.closed ? 1 : 0;\n      if (ca !== cb) return ca - cb;\n      const dir = (__tSortDir==='asc') ? 1 : -1;\n      switch(__tSortKey){\n        case 'id': return ((Number(a.displayId)||0) - (Number(b.displayId)||0)) * dir;\n        case 'name': return String(a.name).localeCompare(String(b.name)) * dir;\n        case 'assigned': return String(a.assignedName).localeCompare(String(b.assignedName)) * dir;\n        case 'status': return String(a.statusName).localeCompare(String(b.statusName)) * dir;\n        default: return 0;\n      }\n    };\n    rows.sort(cmp);\n    return rows;\n  }\n  function renderTaskSortIndicators(){\n    ['id','name','assigned','status'].forEach(k=>{\n      const el = document.getElementById('dir2-'+k); if (!el) return; el.textContent = (__tSortKey===k) ? (__tSortDir==='asc' ? '\u25B2' : '\u25BC') : '';\n    });\n  }\n  function setTasks(tasks){ __tasks = Array.isArray(tasks) ? tasks.slice() : []; renderTasksTable(); }\n  function renderTasksTable(){\n    const body = document.getElementById('tasksBody'); if (!body) return;\n    const rows = computeTaskRows();\n    body.innerHTML = rows.map(r => (\n      '<tr data-id=\"'+r.dataId+'\" class=\"task-row'+(r.closed?' closed':'')+'\">'\n      + '<td style=\"width:90px;\">'+String(r.displayId)+'</td>'\n      + '<td>'+String(r.name)+'</td>'\n      + '<td style=\"width:200px;\">'+String(r.assignedName)+'</td>'\n      + '<td style=\"width:160px;\">'+String(r.statusName)+'</td>'\n      + '</tr>'\n    )).join('');\n    renderTaskSortIndicators();\n  }\n  (function(){\n    var search = document.getElementById('taskSearch');\n    if (search) search.addEventListener('input', function(){ __tSearch = (search && search.value) ? search.value : ''; renderTasksTable(); });\n    var ths = document.querySelectorAll('th.sortable'); ths.forEach(function(th){ th.addEventListener('click', function(){ var key = th.getAttribute('data-key'); if (!key) return; if (th.closest('table') && th.closest('table').contains(document.getElementById('tasksBody'))) { if (__tSortKey === key) { __tSortDir = (__tSortDir==='asc') ? 'desc' : 'asc'; } else { __tSortKey = key; __tSortDir = 'asc'; } renderTasksTable(); } }); });\n    renderTasksTable();\n  })();\n  window.addEventListener('message', function(e){ var msg=e.data||{}; if (msg.type==='setLinkedTasks'){ setTasks(msg.tasks||[]); }});\n  var addTaskBtn = document.getElementById('addExistingTask'); if (addTaskBtn) addTaskBtn.addEventListener('click', function(){ vscode.postMessage({ type: 'addExistingTask' }); });\n  var createTaskBtn = document.getElementById('createNewTask'); if (createTaskBtn) createTaskBtn.addEventListener('click', function(){ vscode.postMessage({ type: 'createNewTask' }); });\n  var tmenu = document.getElementById('tmenu');\n  function hideTaskMenu(){ if (tmenu) { tmenu.style.display='none'; tmenu.innerHTML=''; } }\n  function showTaskMenu(x, y, id){ if (!tmenu) return; tmenu.innerHTML='';\n    function add(label, type){ var b=document.createElement('button'); b.textContent=label; b.addEventListener('click', function(e){ e.stopPropagation(); hideTaskMenu(); vscode.postMessage({ type: type, taskId: Number(id) }); }); tmenu.appendChild(b); }\n    add('Edit the task\u2026','editTask');\n    add('Remove the task from the story','removeTask');\n    add('Delete the task','deleteTask');\n    tmenu.style.display='block';\n    // Clamp to viewport after display to measure size\n    var mw = tmenu.offsetWidth || 180; var mh = tmenu.offsetHeight || 100;\n    var nx = Math.max(0, Math.min(x, (window.innerWidth || 0) - mw - 4));\n    var ny = Math.max(0, Math.min(y, (window.innerHeight || 0) - mh - 4));\n    tmenu.style.left = nx + 'px'; tmenu.style.top = ny + 'px';\n  }\n  var tasksBodyEl = document.getElementById('tasksBody');\n  function getRow(target){ return target && target.closest ? target.closest('.task-row') : null; }\n  if (tasksBodyEl) {\n    tasksBodyEl.addEventListener('contextmenu', function(ev){ var row = getRow(ev.target); if (row) { ev.preventDefault(); ev.stopPropagation(); var id = row.getAttribute('data-id'); showTaskMenu(ev.pageX, ev.pageY, id); } });\n    // Fallback for environments where contextmenu is suppressed\n    tasksBodyEl.addEventListener('mousedown', function(ev){ if (ev.button === 2) { var row = getRow(ev.target); if (row) { ev.preventDefault(); ev.stopPropagation(); var id = row.getAttribute('data-id'); showTaskMenu(ev.pageX, ev.pageY, id); } } });\n  }\n  // Block default text context menu when interacting with task rows or our custom menu\n  document.addEventListener('contextmenu', function(ev){ var target = ev.target || null; var insideTaskRow = target && target.closest ? target.closest('.task-row') : null; var insideMenu = target && target.closest ? target.closest('#tmenu') : null; if (insideTaskRow || insideMenu) { ev.preventDefault(); ev.stopPropagation(); } });\n  document.addEventListener('click', function(ev){ if (!tmenu) return; if (tmenu.style.display!=='block') return; if (!tmenu.contains(ev.target)) hideTaskMenu(); });\n  document.addEventListener('keydown', function(ev){ if ((ev.key||'').toLowerCase()==='escape') hideTaskMenu(); });\n  document.addEventListener('scroll', function(){ hideTaskMenu(); }, true);\n  window.addEventListener('blur', function(){ hideTaskMenu(); });\n  // Simple loading placeholder toggle in case of slow initialization\n  (function(){ try { var ld=document.getElementById('loading'); if(ld){ ld.style.display='none'; } } catch(e){} })();\n    const teamBtn = document.getElementById('teamReq');\n    const clientBtn = document.getElementById('clientReq');\n  const blockedBtn = document.getElementById('blocked');\n  function renderFlag(btn, active){ btn.style.opacity = active ? '1' : '0.5'; }\n    let teamRequirement = ${((story as any)?.team_requirement ? 'true' : 'false')};\n    let clientRequirement = ${((story as any)?.client_requirement ? 'true' : 'false')};\n  let _isBlocked = ${isBlocked ? 'true' : 'false'};\n    if (teamBtn) { renderFlag(teamBtn, teamRequirement); teamBtn.addEventListener('click', ()=>{ teamRequirement = !teamRequirement; renderFlag(teamBtn, teamRequirement); }); }\n    if (clientBtn) { renderFlag(clientBtn, clientRequirement); clientBtn.addEventListener('click', ()=>{ clientRequirement = !clientRequirement; renderFlag(clientBtn, clientRequirement); }); }\n    if (blockedBtn) { renderFlag(blockedBtn, _isBlocked); blockedBtn.addEventListener('click', ()=>{ _isBlocked = !_isBlocked; renderFlag(blockedBtn, _isBlocked); }); }\n  const epicSel = document.getElementById('epic');\n  // Initialize role-based points rows from possible story points maps (roleId -> pointId/value).\n  const pointsBody = document.getElementById('pointsBody');\n  try {\n    // Build and de-duplicate roles by id and by name (case-insensitive)\n    const rolesRaw = ${JSON.stringify((opts.roles || []).map(r=>({id:r.id, name:r.name, slug: (r as any)?.slug, computable: (r as any)?.computable})))};\n    var roles = Array.isArray(rolesRaw) ? Array.from(new Map(rolesRaw.map(function(r){ return [String(r.id), { id: r.id, name: r.name, slug: r.slug }]; })).values()) : [];\n    // Second pass: collapse duplicates that have the same normalized name\n    if (Array.isArray(roles)) {\n      var byName = new Map();\n      var unique = [];\n      roles.forEach(function(r){\n        var key = String((r && r.name ? r.name : '')).trim().toLowerCase();\n        if (!byName.has(key)) { byName.set(key, true); unique.push(r); }\n      });\n      roles = unique;\n    }\n    // Filter out non-computable roles if computable flag is present\n    roles = roles.filter(function(r){ return (rolesRaw.find(function(x){ return String(x.id)===String(r.id); }) || {}).computable !== false; });\n    // existing points candidates (different Taiga versions/serializations)\n    const existingCandidates = ${JSON.stringify({\n      points: (story as any)?.points ?? null,\n      role_points: (story as any)?.role_points ?? null,\n      points_by_role: (story as any)?.points_by_role ?? null,\n      total_points: (story as any)?.total_points ?? null\n    })};\n    function normalizeExisting(c){\n      var out = {};\n      function take(obj){\n        for (var k in obj){ if (!Object.prototype.hasOwnProperty.call(obj,k)) continue; var v = obj[k];\n          if (v && typeof v === 'object') { if ('id' in v) out[k] = v.id; else if ('pk' in v) out[k] = v.pk; else if ('value' in v) out[k] = v.value; else if ('point' in v && v.point && typeof v.point==='object' && 'id' in v.point) out[k] = v.point.id; }\n          else { out[k] = v; }\n        }\n      }\n      if (!c) return out;\n      if (c.points && typeof c.points === 'object') take(c.points);\n      if (c.role_points && typeof c.role_points === 'object') take(c.role_points);\n      if (c.points_by_role && typeof c.points_by_role === 'object') take(c.points_by_role);\n      return out;\n    }\n    const existingRaw = normalizeExisting(existingCandidates);\n    // Build a flexible lookup by role id, slug, or name (case-insensitive)\n    var existingLookup = new Map();\n    Object.keys(existingRaw).forEach(function(k){\n      var v = existingRaw[k];\n      var asNum = Number(k);\n      if (!isNaN(asNum)) existingLookup.set('id:' + String(asNum), v);\n      if (typeof k === 'string') {\n        var low = k.trim().toLowerCase();\n        existingLookup.set('slug:' + low, v);\n        existingLookup.set('name:' + low, v);\n      }\n    });\n    const pointsList = ${JSON.stringify(opts.points || [])};\n    function resolveExistingForRole(role){\n      var byId = existingLookup.get('id:' + String(role.id));\n      if (byId != null) return byId;\n      var bySlug = role.slug ? existingLookup.get('slug:' + String(role.slug).trim().toLowerCase()) : undefined;\n      if (bySlug != null) return bySlug;\n      var byName = role.name ? existingLookup.get('name:' + String(role.name).trim().toLowerCase()) : undefined;\n      return byName;\n    }\n    function addRow(role){\n      const tr = document.createElement('tr');\n      const roleId = role.id; const roleName = role.name || ('Role ' + roleId);\n      var existing = resolveExistingForRole(role);\n      var found = false;\n      var opts = pointsList.map(function(p){\n        var disp = (p && p.value != null) ? String(p.value) : (p && p.name ? String(p.name) : '');\n        var isSel = (String(existing)===String(p.id) || String(existing)===String(p.value));\n        if (isSel) found = true;\n        return '<option value=\"' + p.id + '\"' + (isSel ? ' selected' : '') + '>' + disp + '</option>';\n      });\n      var unknown = (!found && existing !== '' && existing != null) ? '<option value=\"\" selected disabled>(' + String(existing) + ')</option>' : '<option value=\"\"></option>';\n      const options = [unknown].concat(opts).join('');\n      var cellHtml = '<td data-roleid=\"' + roleId + '\">' + roleName + '</td>' +\n                     '<td class=\"points-cell\"><select>' + options + '</select></td>';\n      tr.innerHTML = cellHtml;\n      if (pointsBody) pointsBody.appendChild(tr);\n    }\n    function addGenericRow(){\n      const tr = document.createElement('tr');\n      var total = ${JSON.stringify(((opts.story as any)?.total_points) ?? null)};\n      var found = false;\n      var optsHtml = pointsList.map(function(p){\n        var disp = (p && p.value != null) ? String(p.value) : (p && p.name ? String(p.name) : (p && p.id != null ? String(p.id) : ''));\n        var isSel = (total != null && (String(total)===String(p.value) || String(total)===String(p.name) || String(total)===String(p.id)));\n        if (isSel) found = true;\n        return '<option value=\"' + p.id + '\"' + (isSel ? ' selected' : '') + '>' + disp + '</option>';\n      });\n      var unknown = (!found && total != null) ? '<option value=\"\" selected disabled>(' + String(total) + ')</option>' : '<option value=\"\"></option>';\n      const options = [unknown].concat(optsHtml).join('');\n      tr.innerHTML = '<td data-roleid=\"\">Points</td><td class=\"points-cell\"><select>' + options + '</select></td>';\n      if (pointsBody) pointsBody.appendChild(tr);\n    }\n    if (Array.isArray(roles) && roles.length) { roles.forEach(function(r){ addRow(r); }); } else { addGenericRow(); }\n  } catch (e) {}\n  const saveBtn = document.getElementById('save');\n  if (saveBtn) saveBtn.addEventListener('click', () => {\n    // Collect role->points mapping\n    const pts = {};\n    if (pointsBody) {\n      Array.from(pointsBody.querySelectorAll('tr')).forEach(function(tr){\n        var td = tr.querySelector('td');\n        var roleId = td ? td.getAttribute('data-roleid') : null;\n        var select = tr.querySelector('select');\n        if (select && select.value !== '' && roleId) {\n          var idVal = Number(select.value);\n          if (!isNaN(idVal)) { pts[roleId] = idVal; }\n        }\n      });\n    }\n    // Collect selected epics (multi-select)\n    var epicIds = [];\n    try {\n      if (epicSel && epicSel.selectedOptions) {\n        epicIds = Array.from(epicSel.selectedOptions).map(function(o){ return Number(o.value); }).filter(function(n){ return !isNaN(n); });\n      } else if (epicSel && epicSel.value) {\n        var v = Number(epicSel.value); if (!isNaN(v)) epicIds = [v];\n      }\n    } catch (e) {}\n    vscode.postMessage({ type: 'save', payload: {\n      subject: (document.getElementById('subject')).value,\n      description: (document.getElementById('desc')).value,\n      epicIds: epicIds,\n      sprintId: parseNullableInt((document.getElementById('sprint')).value),\n      statusId: parseNullableInt((document.getElementById('status')).value),\n      assignedTo: parseNullableInt((document.getElementById('assigned')).value),\n      tags: (document.getElementById('tags')).value.split(',').map(s=>s.replace(/,+$/, '').trim()).filter(s=>s.length>0),\n      team_requirement: teamRequirement,\n      client_requirement: clientRequirement,\n      is_blocked: _isBlocked,\n      due_date: (document.getElementById('dueDate')).value,\n      points: pts\n    }});\n  });\n  const cancelBtn = document.getElementById('cancel');\n  if (cancelBtn && cancelBtn.addEventListener) cancelBtn.addEventListener('click', () => vscode.postMessage({ type: 'cancel' }));\n  function parseNullableInt(v){ return v===''? undefined : Number(v); }\n  </script>\n  </body></html>`;\n}\n\nfunction escapeHtml(s: string){ return s.replace(/[&<>\"']/g, (c)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;' }[c] as string)); }\nfunction getNonce(){ let t=''; const p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for(let i=0;i<32;i++) t+=p.charAt(Math.floor(Math.random()*p.length)); return t; }\nasync function handleTokenError(service: any, fallbackMsg: string) {\n  try {\n    const api = (service as any)['api'];\n    const test = await api.get('/users/me');\n    if (test?.error && test.error.category === 'auth') {\n      const pick = await vscode.window.showWarningMessage('Your Taiga session has expired. Reconnect?', 'Reconnect');\n      if (pick === 'Reconnect') { await vscode.commands.executeCommand('taiga.connect'); }\n    } else {\n      vscode.window.showErrorMessage(fallbackMsg);\n    }\n  } catch {\n    vscode.window.showErrorMessage(fallbackMsg);\n  }\n}\nfunction renderLoadingHtml(csp: string){\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);} .loading{opacity:.8; font-style: italic;}\n  </style></head>\n  <body><div class=\"loading\">Loading\u2026</div></body></html>`;\n}\n", "import * as vscode from 'vscode';\nimport { TaskService } from '../services/taskService';\nimport { UserService } from '../services/userService';\nimport { Task, UserRef } from '../models/types';\n\nexport class TaskEditor {\n  static async openForCreate(taskService: TaskService, projectId: number, userStoryId: number, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaTaskEditor', 'New Task', vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    panel.webview.html = renderLoadingHtml(csp);\n    const userService = new UserService((taskService as any)['api']);\n    const users: UserRef[] = await (async () => { try { return await userService.listProjectUsers(projectId); } catch { return []; } })();\n    const statuses = await (async () => { try { return await taskService.listTaskStatuses(projectId); } catch { return []; } })();\n    panel.webview.html = renderHtml(csp, nonce, { mode: 'create', users, statuses, siteBaseUrl, projectSlug, projectId, userStoryId });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { subject, description, statusId, assignedTo, due_date, tags, is_blocked } = msg.payload || {};\n        const created = await taskService.createTask({ projectId, userStoryId, subject, description, statusId, assignedTo, dueDate: due_date, tags, isBlocked: is_blocked });\n        if (created) { vscode.window.showInformationMessage('Task created'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll'); }\n        else { await handleTokenError(taskService, 'Creating task failed'); }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n\n  static async openForEdit(taskService: TaskService, task: Task, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaTaskEditor', `Edit Task: ${task.subject || task.id}`, vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    panel.webview.html = renderLoadingHtml(csp);\n    const pid = (task as any).projectId ?? (task as any).project;\n    const userService = new UserService((taskService as any)['api']);\n    const users: UserRef[] = await (async () => { try { return pid ? await userService.listProjectUsers(Number(pid)) : []; } catch { return []; } })();\n    const statuses = await (async () => { try { return pid ? await taskService.listTaskStatuses(Number(pid)) : []; } catch { return []; } })();\n    const full = await (async () => { try { return await taskService.getTask(task.id) || task; } catch { return task; } })();\n    panel.webview.html = renderHtml(csp, nonce, { mode: 'edit', task: full, users, statuses, siteBaseUrl, projectSlug, projectId: Number(pid || 0), userStoryId: Number((full as any).user_story || (full as any).userStoryId || 0) });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { subject, description, statusId, assignedTo, due_date, tags, is_blocked } = msg.payload || {};\n        const updated = await taskService.updateTask(task.id, { subject, description: description ?? null, statusId: statusId ?? null, assignedTo: assignedTo ?? null, dueDate: due_date ?? null, tags: tags ?? undefined, isBlocked: is_blocked ?? null, version: (full as any)?.version });\n        if (updated) { vscode.window.showInformationMessage('Task updated'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll'); }\n        else { await handleTokenError(taskService, 'Updating task failed'); }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n}\n\nfunction renderHtml(csp: string, nonce: string, opts: { mode: 'create'|'edit'; task?: Task; users?: UserRef[]; statuses?: Array<{ id:number; name:string }>; siteBaseUrl?: string; projectSlug?: string; projectId?: number; userStoryId?: number }){\n  const t = opts.task as any;\n  const subject = t?.subject || '';\n  const description = t?.description || '';\n  const assignedId = t?.assigned_to ?? t?.assignedTo;\n  const statusId = t?.status?.id ?? t?.status ?? t?.statusId;\n  const dueDate = (t?.due_date || '').toString().slice(0,10);\n  const isBlocked = !!(t?.is_blocked || t?.blocked);\n  const tags: string[] = Array.isArray(t?.tags) ? (t?.tags || []).map((x:any)=>String(x??'').replace(/,+$/, '').trim()).filter((s:string)=>s.length>0) : [];\n  const users = opts.users || [];\n  const statuses = opts.statuses || [];\n  const userOptions = ['<option value=\"\">Unassigned</option>', ...users.map(u=>`<option value=\"${u.id}\" ${String(assignedId)===String(u.id)?'selected':''}>${escapeHtml(u.fullName || u.username)}</option>`)].join('');\n  const statusOptions = ['<option value=\"\">(none)</option>', ...statuses.map(s=>`<option value=\"${s.id}\" ${String(statusId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const ref = t?.ref || t?.id;\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);} .row{display:flex; gap:8px; align-items:center; margin:6px 0;} .row > label{ flex: 0 0 110px; } .row > :not(label){ flex: 1 1 auto; }\n  input[type=text], textarea, select, input[type=date]{width:100%; box-sizing: border-box; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, rgba(0,0,0,0.18)); padding: 4px 6px; border-radius: 2px;}\n  @media (prefers-color-scheme: dark){ input[type=text], textarea, select, input[type=date]{ border-color: var(--vscode-input-border, rgba(255,255,255,0.18)); } input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) contrast(1.1); } } @media (prefers-color-scheme: light){ input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: none; } } .darklike input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) brightness(1.2) contrast(1.1); }\n  .header{ display:flex; align-items:center; justify-content: space-between; margin-bottom: 8px; }\n  .right{ display:flex; align-items:center; gap:8px; }\n  .header .right select{ width: 220px; }\n  .note{ opacity:.8; font-style: italic; font-size: 12px; }\n  button{ -webkit-appearance: none; appearance: none; background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 4px 10px; }\n  button:hover{ background: var(--vscode-button-hoverBackground); }\n  </style></head>\n  <body>\n  <script nonce=\"${nonce}\">/* detect dark background and mark body for calendar icon contrast */(function(){try{var cs=getComputedStyle(document.body);var bg=cs.getPropertyValue('--vscode-editor-background').trim();function hexToRgb(h){h=h.replace('#','');if(h.length===3)h=h.split('').map(function(c){return c+c;}).join('');var r=parseInt(h.substr(0,2),16),g=parseInt(h.substr(2,2),16),b=parseInt(h.substr(4,2),16);return {r:r,g:g,b:b};}function parseBg(s){if(!s)return null;var m=s.match(/rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)/i);if(m){return {r:+m[1],g:+m[2],b:+m[3]};}if(/^#/.test(s)){return hexToRgb(s);}return null;}var rgb=parseBg(bg);if(rgb){var L=0.2126*rgb.r+0.7152*rgb.g+0.0722*rgb.b; if(L<140){document.body.classList.add('darklike');}}}catch(e){}})();</script>\n  <div class=\"header\">\n    <h3 style=\"margin:0;\">${opts.mode==='create' ? 'Create Task' : 'Edit Task'}${opts.mode==='edit' && ref ? ` <em style=\"font-weight: normal; opacity: .8;\">#${escapeHtml(String(ref))}</em>` : ''}</h3>\n    <div class=\"right\"><label style=\"min-width:auto;\">Assigned to</label><select id=\"assigned\">${userOptions}</select></div>\n  </div>\n  <div class=\"row\"><label>Subject</label><input id=\"subject\" type=\"text\" value=\"${escapeHtml(subject)}\" /></div>\n  <div class=\"row\"><label>Description</label><textarea id=\"desc\" rows=\"6\">${escapeHtml(description)}</textarea></div>\n  <div class=\"row\"><label>Status</label><select id=\"status\">${statusOptions}</select></div>\n  <div class=\"row\"><label>Flags</label>\n    <div class=\"flags\" style=\"display:flex; gap:8px;\">\n      <button id=\"blocked\" title=\"Blocked\">\u26D4</button>\n    </div>\n  </div>\n  <div class=\"row\"><label>Tags</label><input id=\"tags\" type=\"text\" placeholder=\"Comma-separated\" value=\"${escapeHtml(tags.join(', '))}\" /></div>\n  <div class=\"row\"><label>Due date</label><input id=\"dueDate\" type=\"date\" value=\"${escapeHtml(dueDate)}\" /></div>\n  ${(() => { const base = opts.siteBaseUrl || ''; const slug = opts.projectSlug; let url = ''; if (opts.mode==='edit'){ const idPart = String(ref || ''); if (base) url = slug ? `${base}/project/${encodeURIComponent(slug)}/task/${idPart}` : `${base}/task/${idPart}`; } else { if (base) url = slug ? `${base}/project/${encodeURIComponent(slug)}/tasks` : `${base}/tasks`; } const linkHtml = url ? ` (<a href=\"${url}\" target=\"_blank\">${escapeHtml(url)}</a>)` : ''; return `<div class=\\\"row\\\"><label></label><div class=\\\"note\\\">Comments can be edited in Taiga interface only${linkHtml}</div></div>`; })()}\n  <div class=\"actions\">\n    <button id=\"save\">Save</button>\n    <button id=\"cancel\">Cancel</button>\n  </div>\n  <script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const blockedBtn = document.getElementById('blocked');\n  let _isBlocked = ${isBlocked ? 'true' : 'false'};\n  function renderFlag(btn, active){ btn.style.opacity = active ? '1' : '0.5'; }\n  if (blockedBtn) { renderFlag(blockedBtn, _isBlocked); blockedBtn.addEventListener('click', ()=>{ _isBlocked = !_isBlocked; renderFlag(blockedBtn, _isBlocked); }); }\n  const saveBtn = document.getElementById('save');\n  if (saveBtn) saveBtn.addEventListener('click', () => {\n    vscode.postMessage({ type: 'save', payload: {\n      subject: (document.getElementById('subject')).value,\n      description: (document.getElementById('desc')).value,\n      statusId: parseNullableInt((document.getElementById('status')).value),\n      assignedTo: parseNullableInt((document.getElementById('assigned')).value),\n      due_date: (document.getElementById('dueDate')).value,\n      tags: (document.getElementById('tags')).value.split(',').map(s=>s.replace(/,+$/, '').trim()).filter(s=>s.length>0),\n      is_blocked: _isBlocked\n    }});\n  });\n  const cancelBtn = document.getElementById('cancel'); if (cancelBtn) cancelBtn.addEventListener('click', ()=>vscode.postMessage({ type: 'cancel' }));\n  function parseNullableInt(v){ return v===''? undefined : Number(v); }\n  </script>\n  </body></html>`;\n}\n\nfunction escapeHtml(s: string){ return s.replace(/[&<>\"']/g, (c)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;' }[c] as string)); }\nfunction getNonce(){ let t=''; const p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for(let i=0;i<32;i++) t+=p.charAt(Math.floor(Math.random()*p.length)); return t; }\nasync function handleTokenError(service: any, fallbackMsg: string) {\n  try {\n    const api = (service as any)['api'];\n    const test = await api.get('/users/me');\n    if (test?.error && test.error.category === 'auth') {\n      const pick = await vscode.window.showWarningMessage('Your Taiga session has expired. Reconnect?', 'Reconnect');\n      if (pick === 'Reconnect') { await vscode.commands.executeCommand('taiga.connect'); }\n    } else {\n      vscode.window.showErrorMessage(fallbackMsg);\n    }\n  } catch {\n    vscode.window.showErrorMessage(fallbackMsg);\n  }\n}\nfunction renderLoadingHtml(csp: string){\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);} .loading{opacity:.8; font-style: italic;}\n  </style></head>\n  <body><div class=\"loading\">Loading\u2026</div></body></html>`;\n}\n", "import * as vscode from 'vscode';\nimport { IssueService } from '../services/issueService';\nimport { UserService } from '../services/userService';\nimport { UserRef, Issue } from '../models/types';\n\nexport class IssueEditor {\n  static async openForCreate(issueService: IssueService, projectId: number, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaIssueEditor', 'New Issue', vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n  if (ext) panel.iconPath = {\n    light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n    dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n  };\n    const nonce = getNonce(); const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    panel.webview.html = renderLoadingHtml(csp);\n    const userService = new UserService((issueService as any)['api']);\n    const users: UserRef[] = await (async () => { try { return await userService.listProjectUsers(projectId); } catch { return []; } })();\n  const statuses = await (async () => { try { return await issueService.listIssueStatuses(projectId); } catch { return []; } })();\n  const types = await (async () => { try { return await issueService.listIssueTypes(projectId); } catch { return []; } })();\n  const severities = await (async () => { try { return await issueService.listIssueSeverities(projectId); } catch { return []; } })();\n  const priorities = await (async () => { try { return await issueService.listIssuePriorities(projectId); } catch { return []; } })();\n  panel.webview.html = renderHtml(csp, nonce, { mode: 'create', users, statuses, siteBaseUrl, projectSlug, types, severities, priorities });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n  const { subject, description, statusId, assignedTo, due_date, tags, typeId, severityId, priorityId } = msg.payload || {};\n  const res = await issueService.createIssue({ projectId, subject, description, statusId, assignedTo, dueDate: due_date, tags, typeId, severityId, priorityId });\n        if (!res) { await handleTokenError(issueService, 'Creating issue failed'); return; }\n        vscode.window.showInformationMessage('Issue created'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll');\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n\n  static async openForEdit(issueService: IssueService, issue: Issue, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaIssueEditor', `Edit Issue: ${issue.subject || issue.id}`, vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n  if (ext) panel.iconPath = {\n    light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n    dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n  };\n    const nonce = getNonce(); const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    panel.webview.html = renderLoadingHtml(csp);\n    const pid = (issue as any).projectId ?? (issue as any).project;\n    const userService = new UserService((issueService as any)['api']);\n    const users: UserRef[] = await (async () => { try { return pid ? await userService.listProjectUsers(Number(pid)) : []; } catch { return []; } })();\n    const statuses = await (async () => { try { return pid ? await issueService.listIssueStatuses(Number(pid)) : []; } catch { return []; } })();\n    const types = await (async () => { try { return pid ? await issueService.listIssueTypes(Number(pid)) : []; } catch { return []; } })();\n    const severities = await (async () => { try { return pid ? await issueService.listIssueSeverities(Number(pid)) : []; } catch { return []; } })();\n    const priorities = await (async () => { try { return pid ? await issueService.listIssuePriorities(Number(pid)) : []; } catch { return []; } })();\n    const full = await (async () => { try { return await (issueService as any).getIssue?.(issue.id) || issue; } catch { return issue; } })();\n    panel.webview.html = renderHtml(csp, nonce, { mode: 'edit', issue: full, users, statuses, types, severities, priorities, siteBaseUrl, projectSlug });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { subject, description, statusId, assignedTo, due_date, tags, typeId, severityId, priorityId } = msg.payload || {};\n        const res = await issueService.updateIssue(issue.id, { subject, description: description ?? null, statusId: statusId ?? null, assignedTo: assignedTo ?? null, dueDate: due_date ?? null, tags: tags ?? undefined, typeId: typeId ?? null, severityId: severityId ?? null, priorityId: priorityId ?? null, version: (full as any)?.version });\n        if (!res) { await handleTokenError(issueService, 'Updating issue failed'); return; }\n        vscode.window.showInformationMessage('Issue updated'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll');\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n}\n\nasync function handleTokenError(service: any, fallbackMsg: string) {\n  try {\n    const api = (service as any)['api'];\n    const test = await api.get('/users/me');\n    if (test?.error && test.error.category === 'auth') {\n      const pick = await vscode.window.showWarningMessage('Your Taiga session has expired. Reconnect?', 'Reconnect');\n      if (pick === 'Reconnect') { await vscode.commands.executeCommand('taiga.connect'); }\n    } else {\n      vscode.window.showErrorMessage(fallbackMsg);\n    }\n  } catch {\n    vscode.window.showErrorMessage(fallbackMsg);\n  }\n}\n\nfunction renderHtml(csp: string, nonce: string, opts: { mode: 'create'|'edit'; issue?: Issue; users?: UserRef[]; statuses?: Array<{ id:number; name:string }>; types?: Array<{ id:number; name:string }>; severities?: Array<{ id:number; name:string }>; priorities?: Array<{ id:number; name:string }>; siteBaseUrl?: string; projectSlug?: string }){\n  const t = opts.issue as any;\n  const subject = t?.subject || '';\n  const description = t?.description || '';\n  const assignedId = t?.assigned_to ?? t?.assignedTo;\n  const statusId = t?.status?.id ?? t?.status ?? t?.statusId;\n  const dueDate = (t?.due_date || '').toString().slice(0,10);\n  const tags: string[] = Array.isArray(t?.tags) ? (t?.tags || []).map((x:any)=>String(x??'').replace(/,+$/, '').trim()).filter((s:string)=>s.length>0) : [];\n  const users = opts.users || [];\n  const statuses = opts.statuses || [];\n  const types = opts.types || [];\n  const severities = opts.severities || [];\n  const priorities = opts.priorities || [];\n  const typeId = (t?.type && (t?.type.id ?? t?.type)) ?? t?.type;\n  const severityId = (t?.severity && (t?.severity.id ?? t?.severity)) ?? t?.severity;\n  const priorityId = (t?.priority && (t?.priority.id ?? t?.priority)) ?? t?.priority;\n  const userOptions = ['<option value=\"\">Unassigned</option>', ...users.map(u=>`<option value=\"${u.id}\" ${String(assignedId)===String(u.id)?'selected':''}>${escapeHtml(u.fullName || u.username)}</option>`)].join('');\n  const statusOptions = ['<option value=\"\">(none)</option>', ...statuses.map(s=>`<option value=\"${s.id}\" ${String(statusId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const typeOptions = ['<option value=\"\">(none)</option>', ...types.map(s=>`<option value=\"${s.id}\" ${String(typeId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const severityOptions = ['<option value=\"\">(none)</option>', ...severities.map(s=>`<option value=\"${s.id}\" ${String(severityId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const priorityOptions = ['<option value=\"\">(none)</option>', ...priorities.map(s=>`<option value=\"${s.id}\" ${String(priorityId)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('');\n  const ref = t?.ref || t?.id;\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);} .row{display:flex; gap:8px; align-items:center; margin:6px 0;} .row > label{ flex: 0 0 110px; } .row > :not(label){ flex: 1 1 auto; }\n  input[type=text], textarea, select, input[type=date]{width:100%; box-sizing: border-box; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, rgba(0,0,0,0.18)); padding: 4px 6px; border-radius: 2px;}\n  @media (prefers-color-scheme: dark){ input[type=text], textarea, select, input[type=date]{ border-color: var(--vscode-input-border, rgba(255,255,255,0.18)); } input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) contrast(1.1); } } @media (prefers-color-scheme: light){ input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: none; } } .darklike input[type=\"date\"]::-webkit-calendar-picker-indicator{ filter: invert(1) brightness(1.2) contrast(1.1); }\n  .header{ display:flex; align-items:center; justify-content: space-between; margin-bottom: 8px; }\n  .right{ display:flex; align-items:center; gap:8px; }\n  .header .right select{ width: 220px; }\n  .note{ opacity:.8; font-style: italic; font-size: 12px; }\n  button{ -webkit-appearance: none; appearance: none; background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 4px 10px; }\n  button:hover{ background: var(--vscode-button-hoverBackground); }\n  </style></head>\n  <body>\n  <script nonce=\"${nonce}\">/* detect dark background and mark body for calendar icon contrast */(function(){try{var cs=getComputedStyle(document.body);var bg=cs.getPropertyValue('--vscode-editor-background').trim();function hexToRgb(h){h=h.replace('#','');if(h.length===3)h=h.split('').map(function(c){return c+c;}).join('');var r=parseInt(h.substr(0,2),16),g=parseInt(h.substr(2,2),16),b=parseInt(h.substr(4,2),16);return {r:r,g:g,b:b};}function parseBg(s){if(!s)return null;var m=s.match(/rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)/i);if(m){return {r:+m[1],g:+m[2],b:+m[3]};}if(/^#/.test(s)){return hexToRgb(s);}return null;}var rgb=parseBg(bg);if(rgb){var L=0.2126*rgb.r+0.7152*rgb.g+0.0722*rgb.b; if(L<140){document.body.classList.add('darklike');}}}catch(e){}})();</script>\n  <div class=\"header\">\n    <h3 style=\"margin:0;\">${opts.mode==='create' ? 'Create Issue' : 'Edit Issue'}${opts.mode==='edit' && ref ? ` <em style=\"font-weight: normal; opacity: .8;\">#${escapeHtml(String(ref))}</em>` : ''}</h3>\n    <div class=\"right\"><label style=\"min-width:auto;\">Assigned to</label><select id=\"assigned\">${userOptions}</select></div>\n  </div>\n  <div class=\"row\"><label>Subject</label><input id=\"subject\" type=\"text\" value=\"${escapeHtml(subject)}\" /></div>\n  <div class=\"row\"><label>Description</label><textarea id=\"desc\" rows=\"6\">${escapeHtml(description)}</textarea></div>\n  <div class=\"row\"><label>Status</label><select id=\"status\">${statusOptions}</select></div>\n  <div class=\"row\"><label>Type</label><select id=\"type\">${typeOptions}</select></div>\n  <div class=\"row\"><label>Severity</label><select id=\"severity\">${severityOptions}</select></div>\n  <div class=\"row\"><label>Priority</label><select id=\"priority\">${priorityOptions}</select></div>\n  <div class=\"row\"><label>Tags</label><input id=\"tags\" type=\"text\" placeholder=\"Comma-separated\" value=\"${escapeHtml(tags.join(', '))}\" /></div>\n  <div class=\"row\"><label>Due date</label><input id=\"dueDate\" type=\"date\" value=\"${escapeHtml(dueDate)}\" /></div>\n  ${(() => { const base = opts.siteBaseUrl || ''; const slug = opts.projectSlug; let url = ''; if (opts.mode==='edit'){ const idPart = String(ref || ''); if (base) url = slug ? `${base}/project/${encodeURIComponent(slug)}/issue/${idPart}` : `${base}/issue/${idPart}`; } else { if (base) url = slug ? `${base}/project/${encodeURIComponent(slug)}/issues` : `${base}/issues`; } const linkHtml = url ? ` (<a href=\"${url}\" target=\"_blank\">${escapeHtml(url)}</a>)` : ''; return `<div class=\\\"row\\\"><label></label><div class=\\\"note\\\">Comments can be edited in Taiga interface only${linkHtml}</div></div>`; })()}\n  <div class=\"actions\">\n    <button id=\"save\">Save</button>\n    <button id=\"cancel\">Cancel</button>\n  </div>\n  <script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const saveBtn = document.getElementById('save');\n  if (saveBtn) saveBtn.addEventListener('click', () => {\n    vscode.postMessage({ type: 'save', payload: {\n      subject: (document.getElementById('subject')).value,\n      description: (document.getElementById('desc')).value,\n  statusId: parseNullableInt((document.getElementById('status')).value),\n  typeId: parseNullableInt((document.getElementById('type')).value),\n  severityId: parseNullableInt((document.getElementById('severity')).value),\n  priorityId: parseNullableInt((document.getElementById('priority')).value),\n      assignedTo: parseNullableInt((document.getElementById('assigned')).value),\n      due_date: (document.getElementById('dueDate')).value,\n      tags: (document.getElementById('tags')).value.split(',').map(s=>s.replace(/,+$/, '').trim()).filter(s=>s.length>0)\n    }});\n  });\n  const cancelBtn = document.getElementById('cancel'); if (cancelBtn) cancelBtn.addEventListener('click', ()=>vscode.postMessage({ type: 'cancel' }));\n  function parseNullableInt(v){ return v===''? undefined : Number(v); }\n  </script>\n  </body></html>`;\n}\n\nfunction escapeHtml(s: string){ return s.replace(/[&<>\"']/g, (c)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;' }[c] as string)); }\nfunction getNonce(){ let t=''; const p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for(let i=0;i<32;i++) t+=p.charAt(Math.floor(Math.random()*p.length)); return t; }\nfunction renderLoadingHtml(csp: string){\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);} .loading{opacity:.8; font-style: italic; font-size: 12px;}\n  </style></head>\n  <body><div class=\"loading\">Loading\u2026</div></body></html>`;\n}\n", "import * as vscode from 'vscode';\nimport { ConfigurationManager } from './config/configurationManager';\nimport { AuthManager } from './auth/authManager';\nimport { createLogger } from './utils/logger';\nimport { TaigaApiClient } from './api/taigaApiClient';\nimport { ProjectService } from './services/projectService';\nimport { UserStoryService } from './services/userStoryService';\nimport { IssueService } from './services/issueService';\n// ProjectTree replaced by Controls view combobox\nimport { UserStoriesTreeProvider } from './tree/userStoriesTree';\nimport { IssuesTreeProvider } from './tree/issuesTree';\nimport { EpicsTreeProvider } from './tree/epicsTree';\nimport { SprintsTreeProvider } from './tree/sprintsTree';\nimport { EpicService } from './services/epicService';\nimport { SprintService } from './services/sprintService';\nimport { TaskService } from './services/taskService';\nimport { UserService } from './services/userService';\nimport { ControlsViewProvider } from './views/controlsView';\nimport { registerCommands } from './commands/registerCommands';\nimport { showDiagnostics } from './diagnostics/diagnostics';\nimport { NormalizedError } from './models/types';\nimport { EpicEditor } from './editors/epicEditor';\nimport { StoryEditor } from './editors/storyEditor';\nimport { SprintEditor } from './editors/sprintEditor';\n\nlet activeProject: any | undefined;\n// filters persisted via providers/memento in future\n\nexport async function activate(context: vscode.ExtensionContext) {\n  const configMgr = new ConfigurationManager();\n  const currentCfg = configMgr.getEffective();\n  const logger = createLogger('Taiga', () => configMgr.getEffective().verbose);\n  const authMgr = new AuthManager(context);\n\n  async function getToken(): Promise<string | undefined> {\n    const token = await authMgr.getToken(currentCfg.tokenSecretId);\n    return token;\n  }\n\n  let api = new TaigaApiClient(currentCfg.baseUrl || '', getToken, undefined, (m) => logger.info(m));\n\n  const projectService = new ProjectService(api);\n  const userStoryService = new UserStoryService(api);\n  const issueService = new IssueService(api);\n  const epicService = new EpicService(api);\n  const sprintService = new SprintService(api);\n  const storiesTree = new UserStoriesTreeProvider(userStoryService);\n  const issuesTree = new IssuesTreeProvider(issueService);\n  const epicsTree = new EpicsTreeProvider(epicService);\n  const sprintsTree = new SprintsTreeProvider(sprintService);\n  const taskService = new TaskService(api);\n  const userService = new UserService(api);\n\n  // Register trees\n  vscode.window.registerTreeDataProvider('taigaEpics', epicsTree);\n  vscode.window.registerTreeDataProvider('taigaSprints', sprintsTree);\n  // Use a TreeView for User Stories so we can implement double-click behavior\n  const storiesTreeView = vscode.window.createTreeView('taigaUserStories', { treeDataProvider: storiesTree });\n  context.subscriptions.push(storiesTreeView);\n  vscode.window.registerTreeDataProvider('taigaIssues', issuesTree);\n  // Register Controls webview\n  const controlsProvider = new ControlsViewProvider(projectService, {\n    getActiveProject() { return activeProject; },\n    async setActiveProjectById(id: number) {\n      const projects = await projectService.listProjects();\n      const p = projects.find(x => x.id === id);\n      if (p) {\n        // show loading immediately across views\n        epicsTree.setActiveProject(p.id);\n        sprintsTree.setActiveProject(p.id);\n        storiesTree.setActiveProject(p.id);\n        issuesTree.setActiveProject(p.id);\n        commandCtx.setActiveProject(p as any);\n      }\n    },\n    async connect() { await commandCtx.connectWithCredentials(); },\n    getShowClosedIssues() { return issuesTree.getIncludeClosed(); },\n    async setShowClosedIssues(v: boolean) {\n      issuesTree.setIncludeClosed(v);\n      await context.globalState.update('taiga.issues.includeClosed', v);\n    }\n  });\n  context.subscriptions.push(vscode.window.registerWebviewViewProvider(ControlsViewProvider.viewId, controlsProvider));\n\n  async function updateConnectionState() {\n    const cfg = configMgr.getEffective();\n    const token = await authMgr.getToken(cfg.tokenSecretId);\n    const baseUrlSet = !!cfg.baseUrl;\n    const tokenPresent = !!token;\n    epicsTree.setConnectionState({ baseUrlSet, tokenPresent });\n    sprintsTree.setConnectionState({ baseUrlSet, tokenPresent });\n    storiesTree.setConnectionState({ baseUrlSet, tokenPresent });\n    issuesTree.setConnectionState({ baseUrlSet, tokenPresent });\n  }\n\n  const commandCtx = {\n  setActiveProject(project: any | undefined) {\n      activeProject = project;\n      context.globalState.update('taiga.activeProject', project ? { id: project.id, name: project.name } : undefined);\n      epicsTree.setActiveProject(project?.id);\n      sprintsTree.setActiveProject(project?.id);\n      storiesTree.setActiveProject(project?.id);\n      issuesTree.setActiveProject(project?.id);\n    },\n    getActiveProject() { return activeProject; },\n    showDiagnostics: () => showDiagnostics({\n      activeInstance: currentCfg.baseUrl,\n      activeProject,\n      projectCount: 0,\n      storyCount: storiesTree.getStoryCount()\n    }),\n  refreshAll: () => { epicsTree.refresh(); sprintsTree.refresh(); storiesTree.refresh(); issuesTree.refresh(); },\n    setToken: async () => {\n      await authMgr.setToken(currentCfg.tokenSecretId);\n      commandCtx.refreshAll();\n    },\n    connectWithCredentials: async () => {\n      const username = await vscode.window.showInputBox({ prompt: 'Taiga username or email', ignoreFocusOut: true });\n      if (!username) return;\n      const password = await vscode.window.showInputBox({ prompt: 'Taiga password', ignoreFocusOut: true, password: true });\n      if (!password) return;\n      // Build a minimal POST to /auth\n      const authUrl = `${configMgr.getEffective().baseUrl.replace(/\\/$/, '')}/auth`;\n      try {\n        const resp = await (globalThis as any).fetch(authUrl, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\n          body: JSON.stringify({ type: 'normal', username: username.trim(), password: password })\n        });\n        const text = await resp.text();\n        let body: any = undefined; try { body = text ? JSON.parse(text) : undefined; } catch { body = text; }\n        if (!resp.ok) {\n          const err: NormalizedError = { category: resp.status === 401 ? 'auth' : 'server', httpStatus: resp.status, message: 'Authentication failed', details: body };\n          vscode.window.showErrorMessage(`Taiga auth failed: ${err.message} (${resp.status})`);\n          return;\n        }\n        const token = body?.auth_token || body?.token || body?.access_token;\n        if (!token) {\n          vscode.window.showErrorMessage('Taiga auth response did not include a token.');\n          return;\n        }\n        await authMgr.setToken(configMgr.getEffective().tokenSecretId, token);\n        vscode.window.showInformationMessage('Connected to Taiga.');\n  await updateConnectionState();\n        // After connect, prompt to select project\n        const projects = await projectService.listProjects();\n        const picked = await vscode.window.showQuickPick(projects.map(p => ({ label: p.name, description: String(p.id), p })), { placeHolder: 'Select Taiga project' });\n        if (picked) {\n          commandCtx.setActiveProject(picked.p);\n        }\n        commandCtx.refreshAll();\n      } catch (e) {\n        vscode.window.showErrorMessage(`Taiga auth error: ${(e as Error).message}`);\n      }\n    }\n  };\n\n  registerCommands(context, { userStories: storiesTree, epics: epicsTree, sprints: sprintsTree, issuesProvider: issuesTree }, commandCtx);\n\n  // Implement double-click to open User Story editor using an internal command debounce\n  (function setupUserStoryDoubleClickCommand() {\n    let lastById = new Map<string, number>();\n    context.subscriptions.push(vscode.commands.registerCommand('taiga._openUserStoryOnDoubleClick', (arg?: any) => {\n      const story = arg?.story;\n      if (!story) return;\n      const id = String(story.id);\n      const now = Date.now();\n      const prev = lastById.get(id) || 0;\n      if (now - prev < 350) {\n        vscode.commands.executeCommand('taiga.editUserStory', { story });\n        lastById.delete(id);\n      } else {\n        lastById.set(id, now);\n        // Clear after timeout to avoid stale entries\n        setTimeout(() => { if ((Date.now() - (lastById.get(id) || 0)) >= 350) lastById.delete(id); }, 400);\n      }\n    }));\n  })();\n\n  // Implement double-click to open Issue editor\n  (function setupIssueDoubleClickCommand() {\n    let lastById = new Map<string, number>();\n    context.subscriptions.push(vscode.commands.registerCommand('taiga._openIssueOnDoubleClick', async (arg?: any) => {\n      const issue = arg?.issue;\n      if (!issue) return;\n      const id = String(issue.id);\n      const now = Date.now();\n      const prev = lastById.get(id) || 0;\n      if (now - prev < 350) {\n        await vscode.commands.executeCommand('taiga.editIssue', { issue });\n        lastById.delete(id);\n      } else {\n        lastById.set(id, now);\n        setTimeout(() => { if ((Date.now() - (lastById.get(id) || 0)) >= 350) lastById.delete(id); }, 400);\n      }\n    }));\n  })();\n\n  // CRUD command implementations (lightweight editors)\n  context.subscriptions.push(\n    vscode.commands.registerCommand('taiga.createEpic', async () => {\n      if (!activeProject) { vscode.window.showWarningMessage('Select a project first'); return; }\n      const [users, statuses] = await Promise.all([\n        (async () => { try { return await userService.listProjectUsers(activeProject.id); } catch { return []; } })(),\n        (async () => { try { return await epicService.listEpicStatuses(activeProject.id); } catch { return []; } })(),\n      ]);\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      let projectSlug: string | undefined = undefined;\n      try {\n        const projects = await projectService.listProjects();\n        projectSlug = projects.find(p => p.id === activeProject!.id)?.slug;\n      } catch {}\n      await EpicEditor.openForCreate(epicService, activeProject.id, users, statuses, siteBaseUrl, projectSlug);\n    }),\n    // Internal helpers to open Task editors from other parts (e.g., webview-backed editors)\n    vscode.commands.registerCommand('taiga._openTaskEditorCreate', async (args?: any) => {\n      try {\n        if (!args) return;\n        const projectId = Number(args.projectId);\n        const storyId = Number(args.storyId);\n        if (!projectId || !storyId) return;\n        const { TaskEditor } = await import('./editors/taskEditor');\n        await TaskEditor.openForCreate(taskService, projectId, storyId, args.siteBaseUrl, args.projectSlug);\n      } catch {}\n    }),\n    vscode.commands.registerCommand('taiga._openTaskEditorEdit', async (args?: any) => {\n      try {\n        if (!args) return;\n        const taskId = Number(args.taskId);\n        if (!taskId) return;\n        const full = await taskService.getTask(taskId);\n        if (!full) return;\n        const { TaskEditor } = await import('./editors/taskEditor');\n        await TaskEditor.openForEdit(taskService, full as any, args.siteBaseUrl, args.projectSlug);\n      } catch {}\n    }),\n    vscode.commands.registerCommand('taiga.editEpic', async (node?: any) => {\n      const epic = node?.epic; if (!epic) return;\n      // Fetch full epic details to ensure description and other fields are present\n      const fullEpic = await (async () => { try { return await epicService.getEpic(epic.id) || epic; } catch { return epic; } })();\n      const projectId = (fullEpic as any).projectId || (fullEpic as any).project || activeProject?.id;\n      const [users, statuses] = await Promise.all([\n        (async () => { try { return projectId ? await userService.listProjectUsers(projectId) : []; } catch { return []; } })(),\n        (async () => { try { return projectId ? await epicService.listEpicStatuses(projectId) : []; } catch { return []; } })(),\n      ]);\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      let projectSlug: string | undefined = undefined;\n      try {\n        const projects = await projectService.listProjects();\n        projectSlug = projectId ? projects.find(p => p.id === projectId)?.slug : undefined;\n      } catch {}\n      await EpicEditor.openForEdit(epicService, fullEpic, users, statuses, userStoryService, siteBaseUrl, projectSlug);\n    }),\n    vscode.commands.registerCommand('taiga.deleteEpic', async (node?: any) => {\n      const epic = node?.epic; if (!epic) return;\n      const label = (epic as any).title || (epic as any).subject || (epic as any).name || `Epic ${epic.id}`;\n      const ok = await vscode.window.showWarningMessage(`Delete epic \"${label}\"?`, { modal: true }, 'Delete');\n      if (ok === 'Delete') { if (await epicService.deleteEpic(epic.id)) { vscode.window.showInformationMessage('Epic deleted'); epicsTree.refresh(); } }\n    }),\n      vscode.commands.registerCommand('taiga.addStoriesToEpic', async (node?: any) => {\n        const epic = node?.epic; if (!epic) return;\n        if (!activeProject) { vscode.window.showWarningMessage('Select a project first'); return; }\n        await storiesTree.load();\n        const all = storiesTree.getStories();\n        const picks = await vscode.window.showQuickPick(all.map(s => ({ label: s.subject, description: String(s.ref ?? s.id), s })), { canPickMany: true, placeHolder: 'Select stories to add to epic' });\n        if (!picks || !picks.length) return;\n        // Link using nested relation endpoint to support many-to-many\n        for (const p of picks) { await userStoryService.addUserStoryToEpic(epic.id, p.s.id); }\n        vscode.window.showInformationMessage(`Added ${picks.length} stories to epic`);\n        storiesTree.refresh();\n      }),\n\n    vscode.commands.registerCommand('taiga.createSprint', async () => {\n      if (!activeProject) { vscode.window.showWarningMessage('Select a project first'); return; }\n      await SprintEditor.openForCreate(sprintService, activeProject.id);\n    }),\n    vscode.commands.registerCommand('taiga.editSprint', async (node?: any) => {\n      const sprint = node?.sprint; if (!sprint) return;\n      const full = await (async () => { try { return await sprintService.getSprint(sprint.id) || sprint; } catch { return sprint; } })();\n      await SprintEditor.openForEdit(sprintService, full);\n    }),\n    vscode.commands.registerCommand('taiga.deleteSprint', async (node?: any) => {\n      const sprint = node?.sprint; if (!sprint) return;\n      const ok = await vscode.window.showWarningMessage(`Delete sprint \"${sprint.name}\"?`, { modal: true }, 'Delete');\n      if (ok === 'Delete') { if (await sprintService.deleteSprint(sprint.id)) { vscode.window.showInformationMessage('Sprint deleted'); sprintsTree.refresh(); } }\n    }),\n\n    vscode.commands.registerCommand('taiga.createUserStory', async () => {\n      if (!activeProject) { vscode.window.showWarningMessage('Select a project first'); return; }\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      let projectSlug: string | undefined = undefined;\n      try {\n        const projects = await projectService.listProjects();\n        projectSlug = projects.find(p => p.id === activeProject!.id)?.slug;\n      } catch {}\n      await StoryEditor.openForCreate(userStoryService, epicService, sprintService, activeProject.id, undefined, siteBaseUrl, projectSlug);\n    }),\n    vscode.commands.registerCommand('taiga.createUserStoryForEpic', async (node?: any) => {\n      const epic = node?.epic; if (!epic || !activeProject) return;\n      const subject = await vscode.window.showInputBox({ prompt: `New story subject (epic: ${epic.title})` }); if (!subject) return;\n      const created = await userStoryService.createUserStory({ projectId: activeProject.id, subject, epicId: epic.id });\n      if (created) { vscode.window.showInformationMessage('User Story created'); storiesTree.refresh(); }\n    }),\n    vscode.commands.registerCommand('taiga.editUserStory', async (node?: any) => {\n      const story = node?.story; if (!story) return;\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      // Resolve slug best-effort from active project or from list\n      let projectSlug: string | undefined = undefined;\n      try {\n        const pidStr = String((story as any)?.projectId ?? (story as any)?.project ?? activeProject?.id ?? '');\n        const pid = Number(pidStr);\n        const projects = await projectService.listProjects();\n        projectSlug = !isNaN(pid) ? projects.find(p => p.id === pid)?.slug : undefined;\n      } catch {}\n      await StoryEditor.openForEdit(userStoryService, epicService, sprintService, story, siteBaseUrl, projectSlug);\n    }),\n    vscode.commands.registerCommand('taiga.manageStoryTasks', async (node?: any) => {\n      const story = node?.story; if (!story) return;\n      const tasks = await taskService.listTasksByUserStory(story.id);\n      const picked = await vscode.window.showQuickPick(tasks.map(t => ({ label: t.subject, description: String(t.id), t })), { placeHolder: 'Tasks (pick to edit in editor or Esc to close)' });\n      if (picked) {\n        try {\n          const { TaskEditor } = await import('./editors/taskEditor');\n          const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n          // Resolve slug best-effort\n          let projectSlug: string | undefined = undefined;\n          try {\n            const pidStr = String((story as any)?.projectId ?? (story as any)?.project ?? activeProject?.id ?? '');\n            const pid = Number(pidStr);\n            const projects = await projectService.listProjects();\n            projectSlug = !isNaN(pid) ? projects.find(p => p.id === pid)?.slug : undefined;\n          } catch {}\n          await TaskEditor.openForEdit(taskService, picked.t as any, siteBaseUrl, projectSlug);\n        } catch {}\n      }\n    }),\n    vscode.commands.registerCommand('taiga.createTaskForStory', async (node?: any) => {\n      const story = node?.story; if (!story || !activeProject) return;\n      try {\n        const { TaskEditor } = await import('./editors/taskEditor');\n        const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n        let projectSlug: string | undefined = undefined;\n        try {\n          const projects = await projectService.listProjects();\n          projectSlug = projects.find(p => p.id === activeProject!.id)?.slug;\n        } catch {}\n        await TaskEditor.openForCreate(taskService, activeProject.id, story.id, siteBaseUrl, projectSlug);\n      } catch {}\n    }),\n    vscode.commands.registerCommand('taiga.deleteUserStory', async (node?: any) => {\n      const story = node?.story; if (!story) return;\n      const ok = await vscode.window.showWarningMessage(`Delete user story \"${story.subject}\"?`, { modal: true }, 'Delete');\n      if (ok === 'Delete') { if (await userStoryService.deleteUserStory(story.id)) { vscode.window.showInformationMessage('User Story deleted'); storiesTree.refresh(); } }\n    }),\n\n    vscode.commands.registerCommand('taiga.createIssue', async () => {\n      if (!activeProject) { vscode.window.showWarningMessage('Select a project first'); return; }\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      let projectSlug: string | undefined = undefined;\n      try { const projects = await projectService.listProjects(); projectSlug = projects.find(p => p.id === activeProject!.id)?.slug; } catch {}\n      const { IssueEditor } = await import('./editors/issueEditor');\n      await IssueEditor.openForCreate(issueService, activeProject.id, siteBaseUrl, projectSlug);\n    }),\n    vscode.commands.registerCommand('taiga.editIssue', async (node?: any) => {\n      const issue = node?.issue; if (!issue) return;\n      const siteBaseUrl = (configMgr.getEffective().baseUrl || '').replace(/\\/(api)(\\/v\\d+)?$/, '');\n      // Resolve slug\n      let projectSlug: string | undefined = undefined;\n      try { const pid = (issue as any).projectId ?? (issue as any).project ?? activeProject?.id; const projects = await projectService.listProjects(); projectSlug = projects.find(p => String(p.id) === String(pid))?.slug; } catch {}\n      const full = await (async () => { try { return await (issueService as any).getIssue?.(issue.id) || issue; } catch { return issue; } })();\n      const { IssueEditor } = await import('./editors/issueEditor');\n      await IssueEditor.openForEdit(issueService, full as any, siteBaseUrl, projectSlug);\n    }),\n    vscode.commands.registerCommand('taiga.deleteIssue', async (node?: any) => {\n      const issue = node?.issue; if (!issue) return;\n      const ok = await vscode.window.showWarningMessage(`Delete issue \"${issue.subject}\"?`, { modal: true }, 'Delete');\n      if (ok === 'Delete') { if (await issueService.deleteIssue(issue.id)) { vscode.window.showInformationMessage('Issue deleted'); issuesTree.refresh(); } }\n    })\n  );\n\n  // Restore selected project\n  const saved = context.globalState.get<{ id: number; name: string }>('taiga.activeProject');\n  if (saved) {\n    activeProject = saved;\n    epicsTree.setActiveProject(saved.id);\n    sprintsTree.setActiveProject(saved.id);\n    storiesTree.setActiveProject(saved.id);\n    issuesTree.setActiveProject(saved.id);\n  }\n  const showClosed = context.globalState.get<boolean>('taiga.issues.includeClosed');\n  if (typeof showClosed === 'boolean') issuesTree.setIncludeClosed(showClosed);\n\n  updateConnectionState();\n  if (activeProject) { epicsTree.load(); sprintsTree.load(); storiesTree.load(); issuesTree.load(); }\n\n  logger.info('Taiga extension activated.');\n\n  // React to settings changes\n  configMgr.watch(context);\n  configMgr.onDidChange(async () => {\n    const cfg = configMgr.getEffective();\n    // rebuild API client if baseUrl changed\n    api = new TaigaApiClient(cfg.baseUrl || '', getToken, undefined, (m) => logger.info(m));\n    await updateConnectionState();\n    // propagate active project if still set\n    epicsTree.setActiveProject(activeProject?.id);\n    sprintsTree.setActiveProject(activeProject?.id);\n    storiesTree.setActiveProject(activeProject?.id);\n    issuesTree.setActiveProject(activeProject?.id);\n    // refresh views\n    epicsTree.refresh();\n    sprintsTree.refresh();\n    storiesTree.refresh();\n    issuesTree.refresh();\n  });\n\n  // Persist toggle changes when command invoked\n  vscode.commands.registerCommand('taiga.toggleShowClosedIssues', async () => {\n    const next = !issuesTree.getIncludeClosed();\n    issuesTree.setIncludeClosed(next);\n    await context.globalState.update('taiga.issues.includeClosed', next);\n  });\n}\n\nexport function deactivate() {}\n", "import * as vscode from 'vscode';\n\nexport interface EffectiveConfig {\n  baseUrl: string;\n  tokenSecretId: string;\n  verbose: boolean;\n  maxPageSize: number;\n}\n\nexport class ConfigurationManager {\n  private _onDidChange = new vscode.EventEmitter<EffectiveConfig>();\n  readonly onDidChange = this._onDidChange.event;\n\n  getEffective(): EffectiveConfig {\n    const cfg = vscode.workspace.getConfiguration();\n    // New single-baseUrl setting\n    let baseUrl = this.normalizeBaseUrl(String(cfg.get<string>('taiga.baseUrl') || ''));\n    // Backward compatibility: if old instances exist, use the first as fallback\n    if (!baseUrl) {\n      const instances = (cfg.get<any[]>('taiga.instances') || []);\n      const activeName = cfg.get<string>('taiga.activeInstanceName') || instances[0]?.name;\n      const active = instances.find((i: any) => i.name === activeName) || instances[0];\n      if (active?.baseUrl) baseUrl = this.normalizeBaseUrl(String(active.baseUrl));\n    }\n    return {\n      baseUrl,\n      tokenSecretId: `taiga:default:token`,\n      verbose: !!cfg.get<boolean>('taiga.enableVerboseLogging'),\n      maxPageSize: cfg.get<number>('taiga.maxPageSize') || 50\n    };\n  }\n\n  watch(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration('taiga')) {\n        this._onDidChange.fire(this.getEffective());\n      }\n    }));\n  }\n\n  // Old normalizeInstance not needed with single baseUrl; keep baseUrl helper below\n\n  private normalizeBaseUrl(rawBaseUrl: string): string {\n    let u = rawBaseUrl.trim().replace(/\\/+$/, '');\n    if (!u) return '';\n    // If there's no '/api' segment at all, append default '/api/v1'\n    const hasApi = /\\/api(\\/|$)/.test(u);\n    if (!hasApi) return `${u}/api/v1`;\n    // If it ends exactly with '/api', append '/v1'\n    if (u.endsWith('/api')) return `${u}/v1`;\n    return u;\n  }\n}\n", "import * as vscode from 'vscode';\n\nexport class AuthManager {\n  constructor(private ctx: vscode.ExtensionContext) {}\n\n  async getToken(secretId: string): Promise<string | undefined> {\n    return this.ctx.secrets.get(secretId);\n  }\n\n  async setToken(secretId: string, value?: string): Promise<string | undefined> {\n    const token = value || await vscode.window.showInputBox({ prompt: 'Enter Taiga API token', ignoreFocusOut: true, password: true });\n    if (!token) return undefined;\n    await this.ctx.secrets.store(secretId, token.trim());\n    return token.trim();\n  }\n}\n", "import * as vscode from 'vscode';\n\nexport interface Logger {\n  info(msg: string): void;\n  warn(msg: string): void;\n  error(msg: string): void;\n  debug(msg: string): void;\n}\n\nexport function createLogger(channelName = 'Taiga', verboseFlag: () => boolean): Logger {\n  const channel = vscode.window.createOutputChannel(channelName);\n  function ts() { return new Date().toISOString(); }\n  function redact(s: string) { return s.replace(/(Bearer\\s+)[A-Za-z0-9._-]+/g, '$1***'); }\n  return {\n    info(msg) { channel.appendLine(`[INFO] ${ts()} ${redact(msg)}`); },\n    warn(msg) { channel.appendLine(`[WARN] ${ts()} ${redact(msg)}`); },\n    error(msg) { channel.appendLine(`[ERROR] ${ts()} ${redact(msg)}`); },\n    debug(msg) { if (verboseFlag()) channel.appendLine(`[DEBUG] ${ts()} ${redact(msg)}`); }\n  };\n}\n", "import { NormalizedError } from '../models/types';\n\nexport function translate(status: number, body: any, networkErr?: Error): NormalizedError {\n  if (networkErr) return { category: 'network', message: networkErr.message };\n  if (status === 401 || status === 403) return { category: 'auth', httpStatus: status, message: body?.detail || 'Unauthorized' };\n  if (status === 404) return { category: 'not_found', httpStatus: status, message: 'Not Found' };\n  if (status === 429) return { category: 'rate_limit', httpStatus: status, message: 'Rate limited' };\n  if ([400, 409, 412, 422].includes(status)) return { category: 'validation', httpStatus: status, message: body?.message || 'Validation error', details: body };\n  if (status >= 500) return { category: 'server', httpStatus: status, message: 'Server error' };\n  return { category: 'unknown', httpStatus: status, message: 'Unexpected response', details: body };\n}\n", "import { translate } from './errorTranslator';\nimport { NormalizedError } from '../models/types';\n\n// Minimal fetch/response typing so we do not rely on DOM lib in tsconfig\nexport interface FetchLikeResponse {\n  ok: boolean;\n  status: number;\n  headers: { forEach(cb: (value: string, key: string) => void): void };\n  text(): Promise<string>;\n}\nexport type FetchLike = (url: string, init: { method: string; headers: Record<string,string>; body?: string }) => Promise<FetchLikeResponse>;\n\nexport interface GetOptions { query?: Record<string, unknown>; headers?: Record<string, string>; }\nexport interface WriteOptions { headers?: Record<string, string>; sensitive?: boolean; }\n\nexport class TaigaApiClient {\n  private fetchFn: FetchLike;\n  constructor(private baseUrl: string, private tokenProvider: () => Promise<string | undefined>, fetchImpl?: FetchLike, private log?: (msg: string) => void) {\n    this.fetchFn = fetchImpl || (globalThis as any).fetch;\n  }\n\n  async get<T>(path: string, opts: GetOptions = {}) {\n    return this.request<T>('GET', path, undefined, { headers: opts.headers }, opts.query);\n  }\n\n  async post<T>(path: string, body: any, opts: WriteOptions = {}) {\n    return this.request<T>('POST', path, body, opts);\n  }\n  async patch<T>(path: string, body: any, opts: WriteOptions = {}) {\n    return this.request<T>('PATCH', path, body, opts);\n  }\n  async delete<T = any>(path: string, opts: WriteOptions = {}) {\n    return this.request<T>('DELETE', path, undefined, opts);\n  }\n\n  private async request<T>(method: 'GET'|'POST'|'PATCH'|'DELETE', path: string, body?: any, opts: WriteOptions = {}, query?: Record<string, unknown>): Promise<{ data?: T; error?: NormalizedError; status: number; headers: Record<string,string> }>{\n    if (!this.baseUrl) {\n      this.log?.(`[TaigaApi] No baseUrl configured; skipping ${method} ${path}`);\n      return { status: 0, headers: {}, error: translate(0, null, new Error('No Taiga baseUrl configured')) };\n    }\n    const token = await this.tokenProvider();\n    const url = this.buildUrl(path, query);\n    const headers: Record<string,string> = { Accept: 'application/json', ...(opts.headers || {}) };\n    let bodyStr: string | undefined = undefined;\n    if (body !== undefined) {\n      headers['Content-Type'] = 'application/json';\n      bodyStr = JSON.stringify(body);\n    }\n    if (token) headers.Authorization = `Bearer ${token}`;\n    const logBody = bodyStr && !opts.sensitive ? ` body=${(bodyStr.length>200? bodyStr.slice(0,200)+'\u2026' : bodyStr)}` : '';\n    this.log?.(`[TaigaApi] ${method} ${url} (token=${token ? 'present' : 'missing'})${logBody}`);\n    let resp: FetchLikeResponse;\n    try {\n      resp = await this.fetchFn(url, { method, headers, body: bodyStr });\n    } catch (e) {\n      this.log?.(`[TaigaApi] ${method} ${url} network error: ${(e as Error).message}`);\n      return { status: 0, headers: {}, error: translate(0, null, (e as Error)) };\n    }\n    let data: unknown = undefined;\n    const text = await resp.text();\n    if (text) {\n      try { data = JSON.parse(text); } catch { data = text; }\n    }\n    if (!resp.ok) {\n      this.log?.(`[TaigaApi] ${method} ${url} -> ${resp.status}`);\n      return { status: resp.status, headers: this.headerObj(resp), error: translate(resp.status, data) };\n    }\n    this.log?.(`[TaigaApi] ${method} ${url} -> ${resp.status}`);\n    // Verbose preview of response data for GETs to validate shapes without flooding logs\n    try {\n      if (method === 'GET') {\n        const preview = this.previewData(data);\n        if (preview) this.log?.(`[TaigaApi] preview ${path}: ${preview}`);\n      }\n    } catch { /* ignore preview errors */ }\n    return { status: resp.status, headers: this.headerObj(resp), data: data as T };\n  }\n\n  // Create a small preview string for arrays/objects\n  private previewData(data: unknown): string | undefined {\n    if (data == null) return 'null';\n    try {\n      if (Array.isArray(data)) {\n        const first = data[0];\n        if (first && typeof first === 'object') {\n          const keys = Object.keys(first as any).slice(0, 10);\n          return `array(len=${data.length}) firstKeys=${keys.join(',')}`;\n        }\n        return `array(len=${data.length})`;\n      }\n      if (typeof data === 'object') {\n        const obj = data as any;\n        // If 'results' array is present\n        if (Array.isArray(obj.results)) {\n          const first = obj.results[0];\n          const keys = first && typeof first === 'object' ? Object.keys(first).slice(0,10) : [];\n          return `object{results: array(len=${obj.results.length}) firstKeys=${keys.join(',')}}`;\n        }\n        const keys = Object.keys(obj).slice(0, 20);\n        return `object keys=${keys.join(',')}`;\n      }\n      // primitive\n      return String(data).slice(0, 200);\n    } catch {\n      return undefined;\n    }\n  }\n\n  private buildUrl(path: string, query?: Record<string, unknown>): string {\n    const base = `${this.baseUrl.replace(/\\/$/, '')}/${path.replace(/^\\//, '')}`;\n    if (!query) return base;\n    const params = Object.entries(query)\n      .filter(([, v]) => v !== undefined && v !== null)\n      .flatMap(([k, v]) => Array.isArray(v) ? v.map(x => [k, x]) : [[k, v]]);\n    if (!params.length) return base;\n    const qs = params.map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join('&');\n    return `${base}?${qs}`;\n  }\n\n  private headerObj(resp: FetchLikeResponse): Record<string,string> {\n    const out: Record<string,string> = {};\n    resp.headers.forEach((value: string, key: string) => { out[key] = value; });\n    return out;\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { Project } from '../models/types';\n\nexport class ProjectService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listProjects(): Promise<Project[]> {\n    const { data, error } = await this.api.get<any>('/projects');\n    if (error || data == null) return [];\n    // Support both array and paginated object shapes\n    if (Array.isArray(data)) return data as Project[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Project[];\n    return [];\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { ID, UserStory } from '../models/types';\n\nexport class UserStoryService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listUserStories(projectId: number, opts?: { milestoneId?: number | null }): Promise<UserStory[]> {\n    const query: Record<string, any> = { project: projectId };\n    if (opts) {\n      if (opts.milestoneId === null) query['milestone__isnull'] = true;\n      else if (typeof opts.milestoneId === 'number') query['milestone'] = opts.milestoneId;\n    }\n    const { data, error } = await this.api.get<any>('/userstories', { query });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as UserStory[];\n    if (Array.isArray((data as any).results)) return (data as any).results as UserStory[];\n    return [];\n  }\n\n  async createUserStory(input: { projectId: ID; subject: string; description?: string; epicId?: ID; epicIds?: ID[]; milestoneId?: ID; statusId?: ID; assignedTo?: ID; tags?: string[]; isBlocked?: boolean; isPrivate?: boolean; teamRequirement?: boolean; clientRequirement?: boolean; dueDate?: string; points?: Record<string | number, number>; }): Promise<UserStory | undefined> {\n    const payload: any = { project: input.projectId, subject: input.subject };\n    if (input.description !== undefined) payload.description = input.description;\n    // Do not send epic/epics in payload; we'll link via related_userstories endpoint after creation\n    if (input.milestoneId !== undefined) payload.milestone = input.milestoneId;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    if (input.isPrivate !== undefined) payload.is_private = input.isPrivate;\n  if (input.teamRequirement !== undefined) payload.team_requirement = input.teamRequirement;\n  if (input.clientRequirement !== undefined) payload.client_requirement = input.clientRequirement;\n  if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n  if (input.points !== undefined) payload.points = input.points;\n    const { data, error } = await this.api.post<UserStory>('/userstories', payload);\n    if (error || !data) return undefined;\n    const created = data as any;\n    // Link epics if provided\n    const epicIds = (input.epicIds && Array.isArray(input.epicIds)) ? input.epicIds : (input.epicId != null ? [input.epicId] : []);\n    if (created?.id && epicIds && epicIds.length) {\n      for (const eid of epicIds) {\n        await this.linkEpicToUserStory(eid as ID, created.id as ID);\n      }\n      // fetch updated story to include epics array\n      return await this.getUserStory(created.id as ID) || (created as UserStory);\n    }\n    return created as UserStory;\n  }\n\n  async updateUserStory(id: ID, input: { subject?: string | null; description?: string | null; epicId?: ID | null; epicIds?: ID[]; milestoneId?: ID | null; statusId?: ID | null; assignedTo?: ID | null; tags?: string[]; isBlocked?: boolean | null; isPrivate?: boolean | null; teamRequirement?: boolean | null; clientRequirement?: boolean | null; dueDate?: string | null; points?: Record<string | number, number>; version?: number; }): Promise<UserStory | undefined> {\n    const payload: any = {};\n    if (input.subject !== undefined) payload.subject = input.subject;\n    if (input.description !== undefined) payload.description = input.description;\n    // Do not send epic/epics in patch; link after update\n    if (input.milestoneId !== undefined) payload.milestone = input.milestoneId;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    if (input.isPrivate !== undefined) payload.is_private = input.isPrivate;\n  if (input.teamRequirement !== undefined) payload.team_requirement = input.teamRequirement;\n  if (input.clientRequirement !== undefined) payload.client_requirement = input.clientRequirement;\n  if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n  if (input.points !== undefined) payload.points = input.points;\n    if (input.version !== undefined) payload.version = input.version;\n    const { data, error } = await this.api.patch<UserStory>(`/userstories/${id}`, payload);\n    if (error) return undefined;\n    const updated = data as any;\n    // Handle epic links: add new ones and remove unselected using documented endpoints\n    if (input.epicIds !== undefined) {\n      const desired = new Set((input.epicIds || []).map((x:any)=>Number(x)).filter((n:number)=>!isNaN(n)));\n      // Get current links\n      const cur = await this.getUserStory(id);\n      const currentIds = new Set(((cur as any)?.epics || []).map((e:any)=>Number(e?.id)).filter((n:number)=>!isNaN(n)));\n      for (const eid of desired) {\n        if (!currentIds.has(eid)) await this.linkEpicToUserStory(eid as ID, id);\n      }\n      // Remove links that are not desired anymore\n      for (const eid of currentIds) {\n        const num = Number(eid);\n        if (!desired.has(num)) await this.unlinkEpicFromUserStory(num as ID, id);\n      }\n      return await this.getUserStory(id) || (updated as UserStory);\n    }\n    return updated as UserStory;\n  }\n\n  async deleteUserStory(id: ID): Promise<boolean> {\n    const { status, error } = await this.api.delete(`/userstories/${id}`);\n    return !error && status >= 200 && status < 300;\n  }\n\n  async getUserStory(id: ID): Promise<UserStory | undefined> {\n    const { data, error } = await this.api.get<UserStory>(`/userstories/${id}`);\n    if (error) return undefined;\n    return data as UserStory;\n  }\n\n  // Link a user story to an epic using nested endpoint: POST /epics/{epicId}/related_userstories\n  private async linkEpicToUserStory(epicId: ID, userStoryId: ID): Promise<boolean> {\n    const body = { epic: epicId, user_story: userStoryId } as any;\n    const { status, error } = await (this.api as any).post?.(`/epics/${epicId}/related_userstories`, body) || { status: 0, error: { message: 'POST not implemented', category: 'unknown' } };\n    return !error && status >= 200 && status < 300;\n  }\n\n  // Unlink a user story from an epic: DELETE /epics/{epicId}/related_userstories/{userStoryId}\n  private async unlinkEpicFromUserStory(epicId: ID, userStoryId: ID): Promise<boolean> {\n    const { status, error } = await (this.api as any).delete?.(`/epics/${epicId}/related_userstories/${userStoryId}`) || { status: 0, error: { message: 'DELETE not implemented', category: 'unknown' } };\n    return !error && status >= 200 && status < 300;\n  }\n\n  async listUserStoryStatuses(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string; color?: string }>> {\n    const { data, error } = await this.api.get<any>('/userstory-statuses', { query: { project: projectId } });\n    if (error || data == null) return [];\n    let arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    // Filter by project when records expose a project field\n    arr = (arr as any[]).filter((s: any) => {\n      const p = (s?.projectId ?? s?.project_id ?? s?.project);\n      // Accept if no project field, or if numeric/string matches, or if it's an object with id/pk matching\n      if (p == null) return true;\n      const val = typeof p === 'object' ? (('id' in p ? p.id : ('pk' in p ? p.pk : undefined))) : p;\n      return String(val) === String(projectId);\n    });\n    // Deduplicate by id\n    const seen = new Set<string>();\n    const out: Array<{ id: ID; name: string; slug?: string; color?: string }> = [];\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push(s as any); }\n    }\n    return out;\n  }\n\n  async listRoles(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string; computable?: boolean }>> {\n    const { data, error } = await this.api.get<any>('/roles', { query: { project: projectId } });\n    if (error || data == null) return [];\n    const arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    // De-duplicate by id\n    const seen = new Set<string>();\n    const out: Array<{ id: ID; name: string; slug?: string; computable?: boolean }> = [];\n    for (const r of arr as any[]) {\n      const key = String((r as any)?.id);\n      if (!seen.has(key)) {\n        seen.add(key);\n        out.push({ id: (r as any).id, name: (r as any).name, slug: (r as any).slug, computable: (r as any).computable });\n      }\n    }\n    return out;\n  }\n\n  async listPoints(projectId: number): Promise<Array<{ id: ID; name?: string; value?: number }>> {\n    const { data, error } = await this.api.get<any>('/points', { query: { project: projectId } });\n    if (error || data == null) return [];\n    let arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    // Filter by project when available\n    arr = (arr as any[]).filter((p: any) => {\n      const proj = (p?.projectId ?? p?.project_id ?? p?.project);\n      if (proj == null) return true;\n      const val = typeof proj === 'object' ? (('id' in proj ? proj.id : ('pk' in proj ? proj.pk : undefined))) : proj;\n      return String(val) === String(projectId);\n    });\n    // Deduplicate by id\n    const seen = new Set<string>();\n    const out: Array<{ id: ID; name?: string; value?: number }> = [];\n    for (const p of arr as any[]) {\n      const key = String((p as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push(p as any); }\n    }\n    return out;\n  }\n\n  // Public wrappers for epic linking\n  async addUserStoryToEpic(epicId: ID, userStoryId: ID): Promise<boolean> {\n    return this.linkEpicToUserStory(epicId, userStoryId);\n  }\n\n  async removeUserStoryFromEpic(epicId: ID, userStoryId: ID): Promise<boolean> {\n    return this.unlinkEpicFromUserStory(epicId, userStoryId);\n  }\n\n  // List user stories linked to a given epic within a project (best-effort client-side filter)\n  async listUserStoriesForEpic(projectId: number, epicId: ID): Promise<UserStory[]> {\n    const all = await this.listUserStories(projectId);\n    const target = String(epicId);\n    return (all as any[]).filter((s: any) => {\n      const single = s?.epicId ?? s?.epic;\n      const singleId = (single && typeof single === 'object') ? (single.id ?? single.pk ?? undefined) : single;\n      if (singleId != null && String(singleId) === target) return true;\n      const arr = Array.isArray(s?.epics) ? s.epics : [];\n      return arr.some((e: any) => String((e && typeof e === 'object') ? (e.id ?? e.pk ?? e) : e) === target);\n    });\n  }\n\n  // List user stories not linked to a given epic (for \"Add existing\u2026\" picker)\n  async listUserStoriesNotInEpic(projectId: number, epicId: ID): Promise<UserStory[]> {\n    const all = await this.listUserStories(projectId);\n    const target = String(epicId);\n    return (all as any[]).filter((s: any) => {\n      const single = s?.epicId ?? s?.epic;\n      const singleId = (single && typeof single === 'object') ? (single.id ?? single.pk ?? undefined) : single;\n      if (singleId != null && String(singleId) === target) return false;\n      const arr = Array.isArray(s?.epics) ? s.epics : [];\n      return !arr.some((e: any) => String((e && typeof e === 'object') ? (e.id ?? e.pk ?? e) : e) === target);\n    });\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { ID, Issue } from '../models/types';\n\nexport class IssueService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listIssues(projectId: number, includeClosed: boolean): Promise<Issue[]> {\n    const query: any = { project: projectId };\n    if (!includeClosed) { (query as any)['status__is_closed'] = false; }\n    const { data, error } = await this.api.get<any>('/issues', { query });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Issue[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Issue[];\n    return [];\n  }\n\n  async createIssue(input: { projectId: ID; subject: string; description?: string; statusId?: ID; assignedTo?: ID; tags?: string[]; dueDate?: string; typeId?: ID; severityId?: ID; priorityId?: ID }): Promise<Issue | undefined> {\n    const payload: any = { project: input.projectId, subject: input.subject };\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n    if (input.typeId !== undefined) payload.type = input.typeId;\n    if (input.severityId !== undefined) payload.severity = input.severityId;\n    if (input.priorityId !== undefined) payload.priority = input.priorityId;\n    const { data, error } = await this.api.post<Issue>('/issues', payload);\n    if (error) return undefined;\n    return data as Issue;\n  }\n\n  async updateIssue(id: ID, input: { subject?: string | null; description?: string | null; statusId?: ID | null; assignedTo?: ID | null; tags?: string[]; dueDate?: string | null; typeId?: ID | null; severityId?: ID | null; priorityId?: ID | null; version?: number }): Promise<Issue | undefined> {\n    const payload: any = {};\n    if (input.subject !== undefined) payload.subject = input.subject;\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.dueDate !== undefined) payload.due_date = input.dueDate;\n    if (input.typeId !== undefined) payload.type = input.typeId;\n    if (input.severityId !== undefined) payload.severity = input.severityId;\n    if (input.priorityId !== undefined) payload.priority = input.priorityId;\n    if (input.version !== undefined) payload.version = input.version;\n    const { data, error } = await this.api.patch<Issue>(`/issues/${id}`, payload);\n    if (error) return undefined;\n    return data as Issue;\n  }\n\n  async deleteIssue(id: ID): Promise<boolean> {\n    const { status, error } = await this.api.delete(`/issues/${id}`);\n    return !error && status >= 200 && status < 300;\n  }\n\n  async listIssueStatuses(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string }>> {\n    const { data, error } = await this.api.get<any>('/issue-statuses', { query: { project: projectId } });\n    if (error || data == null) return [];\n    const arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    const seen = new Set<string>();\n    const out: Array<{ id: ID; name: string; slug?: string }> = [];\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push({ id: (s as any).id, name: (s as any).name, slug: (s as any).slug }); }\n    }\n    return out;\n  }\n\n  async listIssueTypes(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string }>> {\n    // Try with project filter; if empty or error, retry without filter\n    let data: any, error: any;\n    ({ data, error } = await this.api.get<any>('/issue-types', { query: { project: projectId } }));\n    if (error || data == null || (Array.isArray(data) && data.length === 0) || ((data as any)?.results && (data as any).results.length === 0)) {\n      ({ data, error } = await this.api.get<any>('/issue-types'));\n    }\n    if (error || data == null) return [];\n    const arr = Array.isArray(data) ? data : (Array.isArray((data as any).results) ? (data as any).results : []);\n    const seen = new Set<string>();\n  const out: Array<{ id: ID; name: string; slug?: string }> = [] as any;\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push({ id: (s as any).id, name: (s as any).name, slug: (s as any).slug }); }\n    }\n    return out;\n  }\n\n  async listIssueSeverities(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string }>> {\n    // Try known endpoints: /issue-severities, /severities with and without project filter\n    let data: any = null, error: any = null;\n    // /issue-severities?project=ID\n    ({ data, error } = await this.api.get<any>('/issue-severities', { query: { project: projectId } }));\n    let arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    // /issue-severities (no filter)\n    if (error || data == null || arr.length === 0) {\n      ({ data, error } = await this.api.get<any>('/issue-severities'));\n      arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    }\n    // /severities?project=ID (observed on this server)\n    if (error || data == null || arr.length === 0) {\n      ({ data, error } = await this.api.get<any>('/severities', { query: { project: projectId } }));\n      arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    }\n    // /severities (no filter)\n    if (error || data == null || arr.length === 0) {\n      ({ data, error } = await this.api.get<any>('/severities'));\n      arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    }\n    if (error || data == null) return [];\n    const seen = new Set<string>();\n  const out: Array<{ id: ID; name: string; slug?: string }> = [] as any;\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push({ id: (s as any).id, name: (s as any).name, slug: (s as any).slug }); }\n    }\n    return out;\n  }\n\n  async listIssuePriorities(projectId: number): Promise<Array<{ id: ID; name: string; slug?: string }>> {\n    // Priorities endpoint varies; try /priorities with project, then /issue-priorities, then without project\n    let data: any, error: any;\n    ({ data, error } = await this.api.get<any>('/priorities', { query: { project: projectId } }));\n    let arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    if (error || data == null || arr.length === 0) {\n      ({ data, error } = await this.api.get<any>('/issue-priorities', { query: { project: projectId } }));\n      arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    }\n    if (error || data == null || arr.length === 0) {\n      ({ data, error } = await this.api.get<any>('/priorities'));\n      arr = Array.isArray(data) ? data : (Array.isArray((data as any)?.results) ? (data as any).results : []);\n    }\n    if (error || data == null) return [];\n    const seen = new Set<string>();\n  const out: Array<{ id: ID; name: string; slug?: string }> = [] as any;\n    for (const s of arr as any[]) {\n      const key = String((s as any)?.id);\n      if (!seen.has(key)) { seen.add(key); out.push({ id: (s as any).id, name: (s as any).name, slug: (s as any).slug }); }\n    }\n    return out;\n  }\n}\n", "import * as vscode from 'vscode';\nimport { UserStory } from '../models/types';\nimport { UserStoryService } from '../services/userStoryService';\n\nexport class UserStoriesTreeProvider implements vscode.TreeDataProvider<UserStoryItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<UserStoryItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private stories: UserStory[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n  private selectedEpicIds: number[] = [];\n  private selectedSprintId: number | null | undefined = undefined; // undefined = no sprint filter, null = backlog\n  private baseUrlSet = false;\n  private tokenPresent = false;\n\n  constructor(private userStoryService: UserStoryService) {}\n\n  setActiveProject(id?: number) {\n    this.activeProjectId = id;\n    this.refresh();\n  }\n\n  setEpicFilter(ids: number[]) { this.selectedEpicIds = ids; this.refresh(); }\n  setSprintFilter(id: number | null | undefined) { this.selectedSprintId = id; this.refresh(); }\n\n  refresh(): void { this.load(); }\n  setConnectionState(opts: { baseUrlSet: boolean; tokenPresent: boolean }) {\n    this.baseUrlSet = opts.baseUrlSet;\n    this.tokenPresent = opts.tokenPresent;\n    this._onDidChangeTreeData.fire();\n  }\n\n  getStoryCount(): number { return this.stories.length; }\n  getStories(): UserStory[] { return this.stories; }\n\n  async load(): Promise<void> {\n    if (this.loading) return;\n    this.loading = true;\n    this._onDidChangeTreeData.fire();\n    try {\n      if (this.activeProjectId) {\n        const milestoneId = this.selectedSprintId === undefined ? undefined : this.selectedSprintId;\n        this.stories = await this.userStoryService.listUserStories(this.activeProjectId, { milestoneId });\n            if (this.selectedEpicIds?.length) {\n              // Support multiple shapes: s.epicId (number), s.epic (id or object), s.epics (array of ids or objects)\n              const set = new Set(this.selectedEpicIds.map(x => String(x)));\n              this.stories = this.stories.filter((s: any) => {\n                const single = s?.epicId ?? s?.epic;\n                const singleId = (single && typeof single === 'object') ? (single.id ?? single.pk ?? undefined) : single;\n                if (singleId != null && set.has(String(singleId))) return true;\n                const arr = Array.isArray(s?.epics) ? s.epics : [];\n                return arr.some((e: any) => set.has(String((e && typeof e === 'object') ? (e.id ?? e.pk ?? e) : e)));\n              });\n        }\n      } else {\n        this.stories = [];\n      }\n    } finally {\n      this.loading = false;\n      this._onDidChangeTreeData.fire();\n    }\n  }\n\n  getTreeItem(element: UserStoryItem): vscode.TreeItem { return element; }\n\n  getChildren(element?: UserStoryItem): Promise<UserStoryItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) {\n      return Promise.resolve([new UserStoryItem('Loading...')]);\n    }\n    if (!this.baseUrlSet) {\n      const item = new UserStoryItem('Set Taiga URL in Settings');\n      (item as any).command = { command: 'workbench.action.openSettings', title: 'Open Settings', arguments: ['taiga.baseUrl'] };\n      return Promise.resolve([item]);\n    }\n    if (!this.tokenPresent) {\n      const item = new UserStoryItem('Connect to Taiga\u2026');\n      (item as any).command = { command: 'taiga.connect', title: 'Connect' };\n      return Promise.resolve([item]);\n    }\n    if (!this.activeProjectId) {\n      return Promise.resolve([new UserStoryItem('Select a project to view stories')]);\n    }\n    if (!this.stories.length) {\n      return Promise.resolve([new UserStoryItem('No user stories')]);\n    }\n    // Sort: open first, then closed last; within groups by ref/id ascending\n    const getClosed = (s: any) => {\n      const st = s?.status || s?.statusId;\n      // If status has an is_closed flag, prefer it; otherwise try common closed indicators by slug/name\n      const isClosed = typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false;\n      const slug = (typeof st === 'object' ? (st.slug || '') : '').toString().toLowerCase();\n      const name = (typeof st === 'object' ? (st.name || '') : '').toString().toLowerCase();\n      const closedByText = slug.includes('closed') || name.includes('closed') || slug.includes('done') || name.includes('done') || slug.includes('finished') || name.includes('finished');\n      return Boolean(isClosed || closedByText || s?.is_closed || s?.closed);\n    };\n    const sorted = this.stories.slice().sort((a: any, b: any) => {\n      const ca = getClosed(a) ? 1 : 0;\n      const cb = getClosed(b) ? 1 : 0;\n      if (ca !== cb) return ca - cb; // open (0) before closed (1)\n      const ra = Number(a.ref ?? a.id ?? 0);\n      const rb = Number(b.ref ?? b.id ?? 0);\n      return (ra || 0) - (rb || 0);\n    });\n    return Promise.resolve(sorted.map(s => new UserStoryItem(`[${s.ref ?? s.id}] ${s.subject || 'User Story'}`, s)));\n  }\n}\n\nexport class UserStoryItem extends vscode.TreeItem {\n  story?: UserStory;\n  constructor(label: string, story?: UserStory) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.story = story;\n    if (!story) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(story.id);\n    (this as any).tooltip = story.subject || String(story.id);\n    (this as any).contextValue = 'userStory';\n    // Mark closed with strikethrough/grey via markdown-supported label\n    const st: any = (story as any).status || (story as any).statusId;\n    const isClosed = (typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false)\n      || (typeof st === 'object' ? ((st.slug || '').toString().toLowerCase().includes('closed') || (st.name || '').toString().toLowerCase().includes('closed') || (st.slug || '').toString().toLowerCase().includes('done') || (st.name || '').toString().toLowerCase().includes('done')) : false)\n      || ((story as any).is_closed || (story as any).closed);\n    if (isClosed) {\n      // Use description to grey out and let label keep ref; VS Code does not support markdown strikethrough in TreeItem.label, but we can hint via description prefix\n      this.description = 'closed';\n      this.iconPath = new vscode.ThemeIcon('circle-slash');\n      this.resourceUri = vscode.Uri.parse('taiga://userstory/closed/' + story.id);\n    }\n    // Use a command that the extension debounces to open only on double-click\n    (this as any).command = { command: 'taiga._openUserStoryOnDoubleClick', title: 'Open User Story', arguments: [{ story }] };\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Issue } from '../models/types';\nimport { IssueService } from '../services/issueService';\n\nexport class IssuesTreeProvider implements vscode.TreeDataProvider<IssueItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<IssueItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private issues: Issue[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n  private baseUrlSet = false;\n  private tokenPresent = false;\n  private includeClosed = false;\n  private selectedEpicIds: number[] = [];\n\n  constructor(private issueService: IssueService) {}\n\n  setActiveProject(id?: number) {\n    this.activeProjectId = id;\n    this.refresh();\n  }\n\n  setIncludeClosed(v: boolean) { this.includeClosed = v; this.refresh(); }\n  getIncludeClosed(): boolean { return this.includeClosed; }\n  setEpicFilter(ids: number[]) { this.selectedEpicIds = ids; this.refresh(); }\n  getEpicFilter(): number[] { return this.selectedEpicIds; }\n  setSprintFilter(_id: number | null | undefined) { /* Currently issues are not scoped by sprint in this tree. Method kept for API symmetry. */ }\n\n  refresh(): void { this.load(); }\n  setConnectionState(opts: { baseUrlSet: boolean; tokenPresent: boolean }) {\n    this.baseUrlSet = opts.baseUrlSet;\n    this.tokenPresent = opts.tokenPresent;\n    this._onDidChangeTreeData.fire();\n  }\n\n  async load(): Promise<void> {\n    if (this.loading) return;\n    this.loading = true;\n    this._onDidChangeTreeData.fire();\n    try {\n      if (this.activeProjectId) {\n        this.issues = await this.issueService.listIssues(this.activeProjectId, this.includeClosed);\n        if (this.selectedEpicIds?.length) {\n          const set = new Set(this.selectedEpicIds.map(x => String(x)));\n          // Support multiple shapes: Taiga issues may expose epic via 'epic', 'epicId', or 'epics' array in some setups\n          this.issues = this.issues.filter((i: any) => {\n            const single = i?.epicId ?? i?.epic;\n            if (single != null && set.has(String(single))) return true;\n            const arr = Array.isArray(i?.epics) ? i.epics : [];\n            return arr.some((e: any) => set.has(String(e)) || set.has(String(e?.id ?? e)));\n          });\n        }\n      } else {\n        this.issues = [];\n      }\n    } finally {\n      this.loading = false;\n      this._onDidChangeTreeData.fire();\n    }\n  }\n\n  getTreeItem(element: IssueItem): vscode.TreeItem { return element; }\n\n  getChildren(element?: IssueItem): Promise<IssueItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) return Promise.resolve([new IssueItem('Loading...')]);\n    if (!this.baseUrlSet) {\n      const item = new IssueItem('Set Taiga URL in Settings');\n      (item as any).command = { command: 'workbench.action.openSettings', title: 'Open Settings', arguments: ['taiga.baseUrl'] };\n      return Promise.resolve([item]);\n    }\n    if (!this.tokenPresent) {\n      const item = new IssueItem('Connect to Taiga\u2026');\n      (item as any).command = { command: 'taiga.connect', title: 'Connect' };\n      return Promise.resolve([item]);\n    }\n    if (!this.activeProjectId) return Promise.resolve([new IssueItem('Select a project to view issues')]);\n    const rows: IssueItem[] = [];\n    if (!this.issues.length) rows.push(new IssueItem('No issues'));\n    else {\n      // Sort open first, closed last if status object hints closure\n      const getClosed = (i: any) => {\n        const st = i?.status || i?.statusId;\n        const isClosed = typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false;\n        const slug = (typeof st === 'object' ? (st.slug || '') : '').toString().toLowerCase();\n        const name = (typeof st === 'object' ? (st.name || '') : '').toString().toLowerCase();\n        const closedByText = slug.includes('closed') || name.includes('closed') || slug.includes('done') || name.includes('done') || slug.includes('finished') || name.includes('finished') || slug.includes('resolved') || name.includes('resolved');\n        return Boolean(isClosed || closedByText || i?.is_closed || i?.closed);\n      };\n      const sorted = this.issues.slice().sort((a: any, b: any) => {\n        const ca = getClosed(a) ? 1 : 0;\n        const cb = getClosed(b) ? 1 : 0;\n        if (ca !== cb) return ca - cb;\n        const ra = Number((a as any).ref ?? a.id ?? 0);\n        const rb = Number((b as any).ref ?? b.id ?? 0);\n        return (ra || 0) - (rb || 0);\n      });\n      rows.push(...sorted.map(i => new IssueItem(i)));\n    }\n    return Promise.resolve(rows);\n  }\n}\n\nexport class IssueItem extends vscode.TreeItem {\n  issue?: Issue;\n  constructor(issueOrLabel: Issue | string, maybeIssue?: Issue) {\n    const issue = (typeof issueOrLabel === 'string') ? maybeIssue : (issueOrLabel as Issue);\n    const label = (typeof issueOrLabel === 'string') ? issueOrLabel : (`[${(issue as any)?.ref ?? issue?.id}] ${issue?.subject || 'Issue'}`);\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.issue = issue;\n    if (!issue) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(issue.id);\n    (this as any).tooltip = issue.subject || String(issue.id);\n    (this as any).contextValue = 'issue';\n    // Closed hint styling similar to stories\n    const st: any = (issue as any).status || (issue as any).statusId;\n    const isClosed = (typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false)\n      || (typeof st === 'object' ? ((st.slug || '').toString().toLowerCase().includes('closed') || (st.name || '').toString().toLowerCase().includes('closed') || (st.slug || '').toString().toLowerCase().includes('done') || (st.name || '').toString().toLowerCase().includes('done') || (st.slug || '').toString().toLowerCase().includes('resolved') || (st.name || '').toString().toLowerCase().includes('resolved')) : false)\n      || ((issue as any).is_closed || (issue as any).closed);\n    if (isClosed) {\n      this.description = 'closed';\n      this.iconPath = new vscode.ThemeIcon('circle-slash');\n      this.resourceUri = vscode.Uri.parse('taiga://issue/closed/' + issue.id);\n    }\n    // Double-click open behavior: same debounce approach as user stories, reuse dedicated command\n    (this as any).command = { command: 'taiga._openIssueOnDoubleClick', title: 'Open Issue', arguments: [{ issue }] };\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Epic } from '../models/types';\nimport { EpicService } from '../services/epicService';\n\nexport class EpicsTreeProvider implements vscode.TreeDataProvider<EpicItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<EpicItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private epics: Epic[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n  private baseUrlSet = false;\n  private tokenPresent = false;\n  private selectedEpicIds = new Set<number>();\n\n  constructor(private epicService: EpicService) {}\n\n  setActiveProject(id?: number) { this.activeProjectId = id; this.refresh(); }\n  setConnectionState(opts: { baseUrlSet: boolean; tokenPresent: boolean }) { this.baseUrlSet = opts.baseUrlSet; this.tokenPresent = opts.tokenPresent; this._onDidChangeTreeData.fire(); }\n  refresh(): void { this.load(); }\n  getSelectedEpicIds(): number[] { return Array.from(this.selectedEpicIds); }\n  setSelectedEpicIds(ids: number[]) { this.selectedEpicIds = new Set(ids); this._onDidChangeTreeData.fire(); }\n  toggleEpicSelection(epicId: number) { if (this.selectedEpicIds.has(epicId)) this.selectedEpicIds.delete(epicId); else this.selectedEpicIds.add(epicId); this._onDidChangeTreeData.fire(); }\n\n  async load(): Promise<void> {\n    if (this.loading) return; this.loading = true; this._onDidChangeTreeData.fire();\n    try {\n      if (this.activeProjectId) this.epics = await this.epicService.listEpics(this.activeProjectId);\n      else this.epics = [];\n    } finally { this.loading = false; this._onDidChangeTreeData.fire(); }\n  }\n\n  getTreeItem(element: EpicItem): vscode.TreeItem { return element; }\n  getChildren(element?: EpicItem): Promise<EpicItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) return Promise.resolve([new EpicItem('Loading...')]);\n    if (!this.baseUrlSet) { const i = new EpicItem('Set Taiga URL in Settings'); (i as any).command = { command: 'workbench.action.openSettings', title: 'Open Settings', arguments: ['taiga.baseUrl'] }; return Promise.resolve([i]); }\n    if (!this.tokenPresent) { const i = new EpicItem('Connect to Taiga\u2026'); (i as any).command = { command: 'taiga.connect', title: 'Connect' }; return Promise.resolve([i]); }\n    if (!this.activeProjectId) return Promise.resolve([new EpicItem('Select a project to view epics')]);\n    if (!this.epics.length) return Promise.resolve([new EpicItem('No epics')]);\n    // Sort: open first (not closed), closed last based on status flags/names\n    const getClosed = (e: any) => {\n      const st = e?.status || e?.statusId;\n      const isClosed = typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false;\n      const slug = (typeof st === 'object' ? (st.slug || '') : '').toString().toLowerCase();\n      const name = (typeof st === 'object' ? (st.name || '') : '').toString().toLowerCase();\n      const closedByText = slug.includes('closed') || name.includes('closed') || slug.includes('done') || name.includes('done') || slug.includes('finished') || name.includes('finished');\n      return Boolean(isClosed || closedByText || e?.is_closed || e?.closed || e?.blocked === true);\n    };\n    const sorted = this.epics.slice().sort((a: any, b: any) => {\n      const ca = getClosed(a) ? 1 : 0;\n      const cb = getClosed(b) ? 1 : 0;\n      if (ca !== cb) return ca - cb;\n      return String((a.title || a.subject || '')).localeCompare(String((b.title || b.subject || '')));\n    });\n    return Promise.resolve(sorted.map(e => {\n      const label = (e as any).title || (e as any).subject || (e as any).name || `Epic ${e.id}`;\n      return new EpicItem(label, e, this.selectedEpicIds.has(e.id));\n    }));\n  }\n}\n\nexport class EpicItem extends vscode.TreeItem {\n  epic?: Epic;\n  constructor(label: string, epic?: Epic, selected?: boolean) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.epic = epic;\n    if (!epic) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = String(epic.id);\n    (this as any).tooltip = (epic as any).description || label;\n    (this as any).contextValue = 'epic';\n    // Visual selection hint\n    this.description = selected ? '\u2713' : '';\n    // Colored icon via data URI SVG if color present\n    const color = (epic as any).color || (epic as any).hexColor || (epic as any).hex_color || undefined;\n    if (color) {\n      const svg = `<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><circle cx='8' cy='8' r='6' fill='${color}' stroke='${color}'/></svg>`;\n      this.iconPath = vscode.Uri.parse(`data:image/svg+xml;utf8,${encodeURIComponent(svg)}`);\n    }\n    (this as any).command = { command: 'taiga.toggleEpicFilter', title: 'Toggle Epic Filter', arguments: [epic] };\n    // Closed styling hint\n    const st: any = (epic as any).status || (epic as any).statusId;\n    const isClosed = (typeof st === 'object' ? (st.is_closed || st.isClosed || false) : false)\n      || (typeof st === 'object' ? ((st.slug || '').toString().toLowerCase().includes('closed') || (st.name || '').toString().toLowerCase().includes('closed') || (st.slug || '').toString().toLowerCase().includes('done') || (st.name || '').toString().toLowerCase().includes('done')) : false)\n      || ((epic as any).is_closed || (epic as any).closed);\n    if (isClosed) {\n      // override icon to indicate closed\n      this.iconPath = new vscode.ThemeIcon('circle-slash');\n      if (!this.description) this.description = 'closed'; else this.description += ' \u2022 closed';\n      this.resourceUri = vscode.Uri.parse('taiga://epic/closed/' + epic.id);\n    }\n  }\n}\n", "import * as vscode from 'vscode';\nimport { Sprint } from '../models/types';\nimport { SprintService } from '../services/sprintService';\n\nexport class SprintsTreeProvider implements vscode.TreeDataProvider<SprintItem> {\n  private _onDidChangeTreeData = new vscode.EventEmitter<SprintItem | undefined | void>();\n  readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n  private sprints: Sprint[] = [];\n  private loading = false;\n  private activeProjectId?: number;\n  private baseUrlSet = false;\n  private tokenPresent = false;\n  private selectedSprintId: number | null | undefined = undefined; // undefined = no filter, null = Backlog\n\n  constructor(private sprintService: SprintService) {}\n\n  setActiveProject(id?: number) { this.activeProjectId = id; this.refresh(); }\n  setConnectionState(opts: { baseUrlSet: boolean; tokenPresent: boolean }) { this.baseUrlSet = opts.baseUrlSet; this.tokenPresent = opts.tokenPresent; this._onDidChangeTreeData.fire(); }\n  refresh(): void { this.load(); }\n  getSelectedSprintId(): number | null | undefined { return this.selectedSprintId; }\n  setSelectedSprintId(id: number | null | undefined) { this.selectedSprintId = id; this._onDidChangeTreeData.fire(); }\n\n  async load(): Promise<void> {\n    if (this.loading) return; this.loading = true; this._onDidChangeTreeData.fire();\n    try {\n      if (this.activeProjectId) this.sprints = await this.sprintService.listSprints(this.activeProjectId);\n      else this.sprints = [];\n    } finally { this.loading = false; this._onDidChangeTreeData.fire(); }\n  }\n\n  getTreeItem(element: SprintItem): vscode.TreeItem { return element; }\n  getChildren(element?: SprintItem): Promise<SprintItem[]> {\n    if (element) return Promise.resolve([]);\n    if (this.loading) return Promise.resolve([new SprintItem('Loading...')]);\n    if (!this.baseUrlSet) { const i = new SprintItem('Set Taiga URL in Settings'); (i as any).command = { command: 'workbench.action.openSettings', title: 'Open Settings', arguments: ['taiga.baseUrl'] }; return Promise.resolve([i]); }\n    if (!this.tokenPresent) { const i = new SprintItem('Connect to Taiga\u2026'); (i as any).command = { command: 'taiga.connect', title: 'Connect' }; return Promise.resolve([i]); }\n    if (!this.activeProjectId) return Promise.resolve([new SprintItem('Select a project to view sprints')]);\n    const items: SprintItem[] = [];\n    // Backlog pseudo-item\n    items.push(new SprintItem('Backlog', undefined, this.selectedSprintId === null, true));\n    // Sort sprints: open first, closed last (detect via closed flag or end date in the past with closed status best-effort)\n    const sorted = this.sprints.slice().sort((a: any, b: any) => {\n      const ca = (a?.closed || a?.is_closed) ? 1 : 0;\n      const cb = (b?.closed || b?.is_closed) ? 1 : 0;\n      if (ca !== cb) return ca - cb;\n      return String(a.name || '').localeCompare(String(b.name || ''));\n    });\n    for (const s of sorted) items.push(new SprintItem(s.name || `Sprint ${s.id}`, s, this.selectedSprintId === s.id));\n    return Promise.resolve(items);\n  }\n}\n\nexport class SprintItem extends vscode.TreeItem {\n  sprint?: Sprint;\n  constructor(label: string, sprint?: Sprint, selected?: boolean, isBacklog?: boolean) {\n    super(label, vscode.TreeItemCollapsibleState.None);\n    this.sprint = sprint;\n    if (!sprint && !isBacklog) { (this as any).contextValue = 'info'; return; }\n    (this as any).id = sprint ? String(sprint.id) : 'backlog';\n    (this as any).contextValue = sprint ? 'sprint' : 'backlog';\n    this.description = selected ? '\u25CF' : '';\n    ;(this as any).command = { command: 'taiga.selectSprintFilter', title: 'Select Sprint', arguments: [sprint] };\n    // Closed styling hint\n    if (sprint && ((sprint as any).closed || (sprint as any).is_closed)) {\n      this.iconPath = new vscode.ThemeIcon('circle-slash');\n      if (!this.description) this.description = 'closed'; else this.description += ' \u2022 closed';\n      this.resourceUri = vscode.Uri.parse('taiga://sprint/closed/' + sprint.id);\n    }\n  }\n}\n", "import { TaigaApiClient } from '../api/taigaApiClient';\nimport { Epic, ID } from '../models/types';\n\nexport interface EpicStatus { id: ID; name: string; color?: string; slug?: string }\nexport interface CreateEpicInput {\n  projectId: ID;\n  title: string; // maps to 'subject'\n  description?: string;\n  color?: string;\n  teamRequirement?: boolean;\n  clientRequirement?: boolean;\n  isBlocked?: boolean;\n  statusId?: ID;\n  tags?: string[];\n  assignedTo?: ID;\n}\nexport interface UpdateEpicInput {\n  title?: string | null; // maps to 'subject'\n  description?: string | null;\n  color?: string | null;\n  teamRequirement?: boolean;\n  clientRequirement?: boolean;\n  isBlocked?: boolean;\n  statusId?: ID | null;\n  tags?: string[];\n  assignedTo?: ID | null;\n  version?: number;\n}\n\nexport class EpicService {\n  constructor(private api: TaigaApiClient) {}\n\n  async listEpics(projectId: number): Promise<Epic[]> {\n    const { data, error } = await this.api.get<any>('/epics', { query: { project: projectId } });\n    if (error || data == null) return [];\n    if (Array.isArray(data)) return data as Epic[];\n    if (Array.isArray((data as any).results)) return (data as any).results as Epic[];\n    return [];\n  }\n\n  async listEpicStatuses(projectId: number): Promise<EpicStatus[]> {\n    const { data, error } = await (this.api as any).get?.('/epic-statuses', { query: { project: projectId } });\n    if (error || !data) return [];\n    if (Array.isArray(data)) return data as EpicStatus[];\n    if (Array.isArray((data as any).results)) return (data as any).results as EpicStatus[];\n    return [];\n  }\n\n  async getEpic(id: ID): Promise<Epic | undefined> {\n    const { data, error } = await (this.api as any).get?.(`/epics/${id}`);\n    if (error) return undefined;\n    return data as Epic;\n  }\n\n  async createEpic(input: CreateEpicInput): Promise<Epic | undefined> {\n    const payload: any = {\n      project: input.projectId,\n      subject: input.title,\n    };\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.color !== undefined) payload.color = input.color;\n    if (input.teamRequirement !== undefined) payload.team_requirement = input.teamRequirement;\n    if (input.clientRequirement !== undefined) payload.client_requirement = input.clientRequirement;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    const { data, error } = await (this.api as any).post?.('/epics', payload) || { data: undefined, error: { message: 'POST not implemented', category: 'unknown' } };\n    if (error) return undefined;\n    return data as Epic;\n  }\n\n  async updateEpic(id: ID, input: UpdateEpicInput): Promise<Epic | undefined> {\n    const payload: any = {};\n    if (input.title !== undefined) payload.subject = input.title;\n    if (input.description !== undefined) payload.description = input.description;\n    if (input.color !== undefined) payload.color = input.color;\n    if (input.teamRequirement !== undefined) payload.team_requirement = input.teamRequirement;\n    if (input.clientRequirement !== undefined) payload.client_requirement = input.clientRequirement;\n    if (input.isBlocked !== undefined) payload.is_blocked = input.isBlocked;\n    if (input.statusId !== undefined) payload.status = input.statusId;\n    if (input.tags !== undefined) payload.tags = input.tags;\n    if (input.assignedTo !== undefined) payload.assigned_to = input.assignedTo;\n    if (input.version !== undefined) payload.version = input.version;\n    const { data, error } = await (this.api as any).patch?.(`/epics/${id}`, payload) || { data: undefined, error: { message: 'PATCH not implemented', category: 'unknown' } };\n    if (error) return undefined;\n    return data as Epic;\n  }\n\n  async deleteEpic(id: ID): Promise<boolean> {\n    const { status, error } = await (this.api as any).delete?.(`/epics/${id}`) || { status: 0, error: { message: 'DELETE not implemented', category: 'unknown' } };\n    return !error && status >= 200 && status < 300;\n  }\n}\n", "import * as vscode from 'vscode';\nimport { ProjectService } from '../services/projectService';\n\nexport interface ControlsContext {\n  getActiveProject(): { id: number; name: string } | undefined;\n  setActiveProjectById(id: number): Promise<void>;\n  connect(): Promise<void>;\n  getShowClosedIssues(): boolean;\n  setShowClosedIssues(v: boolean): Promise<void>;\n}\n\nexport class ControlsViewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewId = 'taigaControls';\n  private view?: vscode.WebviewView;\n\n  constructor(private projectService: ProjectService, private ctx: ControlsContext) {}\n\n  resolveWebviewView(webviewView: vscode.WebviewView): void | Thenable<void> {\n    this.view = webviewView;\n    webviewView.webview.options = { enableScripts: true };\n    webviewView.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'connect') {\n        await this.ctx.connect();\n        await this.render();\n      } else if (msg.type === 'selectProject') {\n        const id = Number(msg.id);\n        await this.ctx.setActiveProjectById(id);\n        await this.render();\n      } else if (msg.type === 'toggleShowClosed') {\n        await this.ctx.setShowClosedIssues(!!msg.value);\n        await this.render();\n      } else if (msg.type === 'refresh') {\n        await this.render();\n      }\n    });\n    return this.render();\n  }\n\n  async render() {\n    const projects = await this.projectService.listProjects();\n    const active = this.ctx.getActiveProject();\n    const showClosed = this.ctx.getShowClosedIssues();\n    const options = projects.map(p => `<option value=\"${p.id}\" ${active?.id === p.id ? 'selected' : ''}>${escapeHtml(p.name || String(p.id))}</option>`).join('');\n    const nonce = getNonce();\n  const csp = `default-src 'none'; img-src vscode-resource: https: data:; style-src 'unsafe-inline' vscode-resource:; script-src 'nonce-${nonce}';`;\n    const html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body { font-family: var(--vscode-font-family); padding: 8px; background: var(--vscode-sideBar-background); color: var(--vscode-foreground); }\n  .row { display: flex; align-items: center; gap: 8px; margin: 8px 0; }\n  .label { min-width: 70px; color: var(--vscode-foreground); }\n  select, input[type=\"text\"], textarea {\n    width: 100%;\n    background: var(--vscode-input-background);\n    color: var(--vscode-input-foreground);\n    border: 1px solid var(--vscode-input-border, transparent);\n    padding: 4px 6px;\n    border-radius: 2px;\n  }\n  input[type=\"checkbox\"] { accent-color: var(--vscode-focusBorder); }\n  button { background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 6px 10px; }\n  button:hover { background: var(--vscode-button-hoverBackground); }\n  #connect { width: 100%; text-align: center; }\n  .label { min-width: 90px; }\n  hr { border: none; border-top: 1px solid var(--vscode-panelSection-border); margin: 8px 0; }\n  </style>\n</head>\n<body>\n  <div class=\"row\"><button id=\"connect\">Connect\u2026</button></div>\n  <div class=\"row\">\n    <span class=\"label\">Project</span>\n    <select id=\"project\">${options}</select>\n  </div>\n  <div class=\"row\">\n    <input type=\"checkbox\" id=\"showClosed\" ${showClosed ? 'checked' : ''} />\n    <label for=\"showClosed\">Show closed issues</label>\n  </div>\n  <script nonce=\"${nonce}\">\n    const vscode = acquireVsCodeApi();\n    document.getElementById('connect').addEventListener('click', () => vscode.postMessage({ type: 'connect' }));\n    document.getElementById('project').addEventListener('change', (e) => vscode.postMessage({ type: 'selectProject', id: e.target.value }));\n    document.getElementById('showClosed').addEventListener('change', (e) => vscode.postMessage({ type: 'toggleShowClosed', value: e.target.checked }));\n    // re-render occurs on actions; explicit refresh button removed to avoid duplication with view title actions\n  </script>\n</body>\n</html>`;\n    if (this.view) {\n      this.view.webview.html = html;\n    }\n  }\n}\n\nfunction escapeHtml(s: string): string {\n  return s.replace(/[&<>\"]+/g, (c) => ({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;' }[c] as string));\n}\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n", "import * as vscode from 'vscode';\nimport { Project } from '../models/types';\nimport { UserStoriesTreeProvider } from '../tree/userStoriesTree';\nimport { EpicsTreeProvider } from '../tree/epicsTree';\nimport { SprintsTreeProvider } from '../tree/sprintsTree';\nimport { Epic } from '../models/types';\n\nexport interface CommandContext {\n  setActiveProject(project: Project | undefined): void;\n  getActiveProject(): Project | undefined;\n  showDiagnostics(): void;\n  refreshAll(): void;\n  setToken(): Promise<void>;\n  connectWithCredentials(): Promise<void>;\n}\n\nexport function registerCommands(ctx: vscode.ExtensionContext, providers: { userStories: UserStoriesTreeProvider; epics?: EpicsTreeProvider; sprints?: SprintsTreeProvider; issuesProvider?: { setIncludeClosed(v:boolean):void; getIncludeClosed():boolean; refresh():void; setEpicFilter?(ids:number[]):void; setSprintFilter?(id:number|null|undefined):void } }, commandCtx: CommandContext) {\n  const disposables: vscode.Disposable[] = [];\n\n  disposables.push(\n    vscode.commands.registerCommand('taiga.refreshAll', () => commandCtx.refreshAll()),\n    vscode.commands.registerCommand('taiga.selectProject', (project: Project) => {\n      commandCtx.setActiveProject(project);\n      commandCtx.refreshAll();\n    }),\n    vscode.commands.registerCommand('taiga.showDiagnostics', () => commandCtx.showDiagnostics()),\n    vscode.commands.registerCommand('taiga.setToken', async () => { await commandCtx.setToken(); }),\n    vscode.commands.registerCommand('taiga.connect', async () => { await commandCtx.connectWithCredentials(); }),\n\n    // Filters\n    vscode.commands.registerCommand('taiga.toggleEpicFilter', (epic: Epic) => {\n      if (!providers.epics) return;\n      providers.epics.toggleEpicSelection(epic.id);\n      const ids = providers.epics.getSelectedEpicIds();\n      providers.userStories.setEpicFilter(ids);\n      if (providers.issuesProvider && typeof providers.issuesProvider.setEpicFilter === 'function') {\n        providers.issuesProvider.setEpicFilter(ids);\n      }\n    }),\n    vscode.commands.registerCommand('taiga.selectSprintFilter', (sprint?: { id?: number }) => {\n      if (!providers.sprints) return;\n      // Tri-state behavior: undefined => clear filter, null => backlog, number => specific sprint\n      let next: number | null | undefined;\n      const current = providers.sprints.getSelectedSprintId();\n      if (sprint?.id == null) {\n        // Clicked Backlog. If already backlog, clear filter; else set backlog\n        next = current === null ? undefined : null;\n      } else {\n        // Clicked a sprint. Toggle: if same sprint -> clear; else set to that sprint\n        next = current === sprint.id ? undefined : sprint.id;\n      }\n      providers.sprints.setSelectedSprintId(next);\n      providers.userStories.setSprintFilter(next);\n      if (providers.issuesProvider && typeof providers.issuesProvider.setSprintFilter === 'function') {\n        providers.issuesProvider.setSprintFilter(next);\n      }\n    }),\n\n    // Issues: toggle show closed handled in extension to persist state\n  );\n\n  disposables.forEach(d => ctx.subscriptions.push(d));\n}\n", "import * as vscode from 'vscode';\nimport { Project } from '../models/types';\n\nexport interface DiagnosticsState {\n  activeProject?: Project;\n  projectCount: number;\n  storyCount: number;\n  activeInstance?: string;\n}\n\nexport function showDiagnostics(state: DiagnosticsState) {\n  const lines = [\n    `Active Instance: ${state.activeInstance || 'none'}`,\n    `Active Project: ${state.activeProject ? state.activeProject.name : 'none'}`,\n    `Projects Loaded: ${state.projectCount}`,\n    `User Stories Loaded: ${state.storyCount}`\n  ];\n  vscode.window.showInformationMessage(lines.join('\\n'));\n}\n", "import * as vscode from 'vscode';\nimport { EpicService, EpicStatus } from '../services/epicService';\nimport { UserStoryService } from '../services/userStoryService';\nimport { UserStory } from '../models/types';\nimport { UserRef } from '../models/types';\nimport { Epic } from '../models/types';\n\nexport class EpicEditor {\n  static async openForCreate(epicService: EpicService, projectId: number, users?: UserRef[], statuses?: EpicStatus[], siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaEpicEditor', 'New Epic', vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n  const nonce = getNonce();\n  const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n  panel.webview.html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\" /><meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\"><style>:root{color-scheme:light dark}body{font-family:var(--vscode-font-family);padding:12px;background:var(--vscode-editor-background);color:var(--vscode-foreground)}.loading{opacity:.8;font-style:italic}</style></head><body><div class=\"loading\">Loading\u2026</div></body></html>`;\n  panel.webview.html = renderHtml(csp, nonce, { mode: 'create', users: users || [], statuses: statuses || [], siteBaseUrl, projectSlug, projectId });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n  const { title, color, description, status, team_requirement, client_requirement, blocked, tags, assigned_to } = msg.payload || {};\n  const safeTags = Array.isArray(tags) ? tags.filter((t: string) => !!t && t.trim().length > 0) : undefined;\n  const created = await epicService.createEpic({ projectId, title, color: color || undefined, description: description || undefined, statusId: status ? Number(status) : undefined, teamRequirement: !!team_requirement, clientRequirement: !!client_requirement, isBlocked: !!blocked, tags: safeTags, assignedTo: assigned_to ? Number(assigned_to) : undefined });\n        if (created) {\n          vscode.window.showInformationMessage('Epic created');\n          panel.dispose();\n          vscode.commands.executeCommand('taiga.refreshAll');\n        } else {\n          await handleTokenError(epicService, 'Creating epic failed');\n        }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n\n  static async openForEdit(epicService: EpicService, epic: Epic, users?: UserRef[], statuses?: EpicStatus[], storyService?: UserStoryService, siteBaseUrl?: string, projectSlug?: string) {\n    const panel = vscode.window.createWebviewPanel('taigaEpicEditor', `Edit Epic: ${(epic as any).title || (epic as any).subject || epic.id}`, vscode.ViewColumn.Active, { enableScripts: true });\n    const ext2 = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext2) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext2.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext2.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    // Show loading while we fetch statuses if needed\n    panel.webview.html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\" /><meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\"><style>:root{color-scheme:light dark}body{font-family:var(--vscode-font-family);padding:12px;background:var(--vscode-editor-background);color:var(--vscode-foreground)}.loading{opacity:.8;font-style:italic}</style></head><body><div class=loading>Loading\u2026</div></body></html>`;\n  // Try to fetch statuses for the project if possible; epic has projectId\n  const projectId = (epic as any).projectId || (epic as any).project || 0;\n  let statusList: EpicStatus[] = statuses || [];\n  try { if (projectId && !statusList.length) statusList = await epicService.listEpicStatuses(projectId); } catch {}\n  // Fetch data for linked stories table\n  const storyStatuses = await (async () => { try { return projectId ? await (new UserStoryService((epicService as any)['api'])).listUserStoryStatuses(projectId) : []; } catch { return []; } })();\n  const linkedStories: UserStory[] = await (async () => { try { return (storyService && projectId) ? await storyService.listUserStoriesForEpic(projectId, epic.id) : []; } catch { return []; } })();\n  panel.webview.html = renderHtml(csp, nonce, { mode: 'edit', epic, statuses: statusList, users: users || [], linkedStories, storyStatuses, siteBaseUrl, projectSlug, projectId });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { title, color, description, status, team_requirement, client_requirement, blocked, tags, assigned_to } = msg.payload || {};\n        const safeTags = Array.isArray(tags) ? tags.filter((t: string) => !!t && t.trim().length > 0) : undefined;\n        const updated = await epicService.updateEpic(epic.id, {\n          title: title ?? null,\n          color: (color ?? '') || null,\n          description: description ?? null,\n          statusId: status ? Number(status) : null,\n          teamRequirement: !!team_requirement,\n          clientRequirement: !!client_requirement,\n          isBlocked: !!blocked,\n          tags: safeTags,\n          assignedTo: assigned_to ? Number(assigned_to) : null,\n          version: (epic as any)?.version,\n        });\n        if (updated) {\n          vscode.window.showInformationMessage('Epic updated');\n          panel.dispose();\n          vscode.commands.executeCommand('taiga.refreshAll');\n        } else {\n          await handleTokenError(epicService, 'Updating epic failed');\n        }\n      }\n      if (msg.type === 'addExistingStory') {\n        if (!storyService || !projectId) return;\n        const candidates = await storyService.listUserStoriesNotInEpic(projectId, epic.id);\n        if (!candidates.length) { vscode.window.showInformationMessage('No available user stories to add.'); return; }\n        const picked = await vscode.window.showQuickPick(candidates.map(s => ({ label: s.subject, description: String((s as any).ref ?? s.id), s })), { placeHolder: 'Select a user story to add' });\n        if (picked) {\n          await storyService.addUserStoryToEpic(epic.id, picked.s.id);\n          const refreshed = await storyService.listUserStoriesForEpic(projectId, epic.id);\n          panel.webview.postMessage({ type: 'setLinkedStories', stories: refreshed });\n        }\n      }\n      if (msg.type === 'createNewStory') {\n        // Open the Story create editor with preselected epic\n        try {\n          const { StoryEditor } = await import('./storyEditor');\n          await StoryEditor.openForCreate(storyService!, new EpicService((epicService as any)['api']), new (await import('../services/sprintService')).SprintService((epicService as any)['api']), projectId, [epic.id]);\n        } catch {}\n      }\n      if (msg.type === 'editStory' && msg.storyId) {\n        try {\n          const sFull = await (storyService as any).getUserStory?.(msg.storyId);\n          if (sFull) {\n            const { StoryEditor } = await import('./storyEditor');\n            await StoryEditor.openForEdit(storyService!, new EpicService((epicService as any)['api']), new (await import('../services/sprintService')).SprintService((epicService as any)['api']), sFull);\n          }\n        } catch {}\n      }\n      if (msg.type === 'removeStory' && msg.storyId) {\n        if (!storyService) return;\n        await storyService.removeUserStoryFromEpic(epic.id, Number(msg.storyId));\n        if (projectId) {\n          const refreshed = await storyService.listUserStoriesForEpic(projectId, epic.id);\n          panel.webview.postMessage({ type: 'setLinkedStories', stories: refreshed });\n        }\n      }\n      if (msg.type === 'deleteStory' && msg.storyId) {\n        if (!storyService) return;\n        const ok = await vscode.window.showWarningMessage('Delete this user story?', { modal: true }, 'Delete');\n        if (ok === 'Delete') {\n          await (storyService as any).deleteUserStory?.(Number(msg.storyId));\n          if (projectId) {\n            const refreshed = await storyService.listUserStoriesForEpic(projectId, epic.id);\n            panel.webview.postMessage({ type: 'setLinkedStories', stories: refreshed });\n          }\n          vscode.commands.executeCommand('taiga.refreshAll');\n        }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n    // Refresh linked stories when the editor regains focus\n    panel.onDidChangeViewState(async (e) => {\n      if (e.webviewPanel.active && storyService && projectId) {\n        const refreshed = await storyService.listUserStoriesForEpic(projectId, epic.id);\n        panel.webview.postMessage({ type: 'setLinkedStories', stories: refreshed });\n      }\n    });\n  }\n}\n\nfunction renderHtml(csp: string, nonce: string, opts: { mode: 'create'|'edit'; epic?: Epic; statuses?: EpicStatus[]; users?: UserRef[]; linkedStories?: UserStory[]; storyStatuses?: Array<{ id:number; name:string }>; siteBaseUrl?: string; projectSlug?: string; projectId?: number }) {\n  const epic = opts.epic;\n  const title = (epic as any)?.title || (epic as any)?.subject || (epic as any)?.name || '';\n    const color = (epic as any)?.color || (epic as any)?.hexColor || (epic as any)?.hex_color || '';\n  const description = (epic as any)?.description || '';\n    const status = (epic as any)?.status?.id ?? (epic as any)?.statusId ?? (epic as any)?.status ?? '';\n  const statuses = opts.statuses || [];\n  const statusSelect = statuses.length\n    ? `<select id=\"status\">${['<option value=\"\">(none)</option>', ...statuses.map(s=>`<option value=\"${s.id}\" ${String(status)===String(s.id)?'selected':''}>${escapeHtml(s.name)}</option>`)].join('')}</select>`\n    : `<input id=\"status\" type=\"text\" placeholder=\"Status (choose from Taiga)\" value=\"${escapeHtml(String(status || ''))}\" />`;\n  const teamReq = !!(epic as any)?.team_requirement;\n  const clientReq = !!(epic as any)?.client_requirement;\n  const blocked = !!(epic as any)?.is_blocked || !!(epic as any)?.blocked;\n  const tags: string[] = Array.isArray((epic as any)?.tags)\n    ? (epic as any)?.tags\n        .map((t: any) => String(t ?? ''))\n        .map((t: string) => t.replace(/,+$/, '').trim())\n        .filter((t: string) => t.length > 0)\n    : [];\n  const users = opts.users || [];\n  const assignedId = (epic as any)?.assigned_to || (epic as any)?.assignedTo;\n  const userSelect = ['<option value=\"\">Unassigned</option>', ...users.map(u=>`<option value=\"${u.id}\" ${String(assignedId)===String(u.id)?'selected':''}>${escapeHtml(u.fullName || u.username)}</option>`)].join('');\n  const stories = Array.isArray(opts.linkedStories) ? opts.linkedStories : [];\n  const storyStatuses = Array.isArray(opts.storyStatuses) ? opts.storyStatuses : [];\n  function renderStoriesRows() {\n    return stories.map((s:any) => {\n      const dataId = s?.id; // always use real ID for commands\n      const displayId = s?.ref ?? s?.id; // show ref if available\n      const name = s?.subject || '';\n      const assignedId = s?.assigned_to ?? s?.assignedTo;\n      const assignedName = (()=>{ const f = users.find(u=>String(u.id)===String(assignedId)); return f ? (f.fullName || f.username) : ''; })();\n      const statusId = s?.status?.id ?? s?.status;\n      const statusName = (()=>{ const st = storyStatuses.find(ss=>String(ss.id)===String(statusId)); return st ? st.name : (statusId || ''); })();\n      return `<tr data-id=\"${dataId}\" class=\"story-row\">\n        <td style=\"width:90px;\">${escapeHtml(String(displayId))}</td>\n        <td>${escapeHtml(String(name))}</td>\n        <td style=\"width:200px;\">${escapeHtml(String(assignedName))}</td>\n        <td style=\"width:160px;\">${escapeHtml(String(statusName))}</td>\n      </tr>`;\n    }).join('');\n  }\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);}\n  .row{display:flex; gap:8px; align-items:center; margin:6px 0;}\n  input[type=text], textarea, select, input[type=date]{width:100%; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, rgba(0,0,0,0.18)); padding: 4px 6px; border-radius: 2px;}\n  @media (prefers-color-scheme: dark){ input[type=text], textarea, select, input[type=date]{ border-color: var(--vscode-input-border, rgba(255,255,255,0.18)); } input[type=\\\"date\\\"]::-webkit-calendar-picker-indicator{ filter: invert(1) contrast(1.1); } }\n  @media (prefers-color-scheme: light){ input[type=\\\"date\\\"]::-webkit-calendar-picker-indicator{ filter: none; } }\n  .darklike input[type=\\\"date\\\"]::-webkit-calendar-picker-indicator{ filter: invert(1) brightness(1.2) contrast(1.1); }\n  .actions{display:flex; gap:8px; margin:12px 0 18px 0;}\n  button{ background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 4px 10px; }\n  button:hover{ background: var(--vscode-button-hoverBackground); }\n  label{ min-width: 90px; }\n  .color-palette{ display:flex; gap:6px; flex-wrap: wrap; }\n  .swatch{ width:16px; height:16px; border-radius: 50%; border: 1px solid rgba(0,0,0,.15); cursor:pointer; display:inline-block; }\n  .swatch.selected{ outline: 2px solid var(--vscode-focusBorder); }\n  .flags button{ cursor: pointer; }\n  .header{ display:flex; align-items:center; justify-content: space-between; margin-bottom: 8px; }\n  .right{ display:flex; align-items:center; gap:8px; }\n  .header .right select{ width: 220px; }\n  table.list{ width:100%; border-collapse: collapse; margin-top: 12px; table-layout: fixed; }\n  table.list th, table.list td{ border:1px solid var(--vscode-input-border, rgba(128,128,128,.3)); padding:4px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }\n  th.sortable{ cursor:pointer; user-select: none; }\n  th.sortable .dir{ opacity:.6; font-size: 11px; margin-left: 4px; }\n  #storySearch{ width:220px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, transparent); padding: 4px 6px; border-radius: 2px; }\n  .list-header{ display:flex; align-items:center; justify-content: space-between; margin-top: 16px; }\n  .context-menu{ position:fixed; z-index:9999; background: var(--vscode-editor-background); border:1px solid var(--vscode-widget-border); box-shadow: 0 2px 8px rgba(0,0,0,.2); display:none; }\n  .context-menu button{ display:block; width:100%; text-align:left; padding:6px 10px; background:transparent; border:0; color: var(--vscode-foreground); }\n  .context-menu button:hover{ background: var(--vscode-list-hoverBackground); }\n  .note{ opacity:.8; font-style: italic; font-size: 12px; }\n  tr.closed td{ text-decoration: line-through; color: var(--vscode-disabledForeground, #9aa0a6); opacity: .85; }\n  </style></head>\n  <body>\n  <script nonce=\"${nonce}\">/* detect dark background and mark body for calendar icon contrast */(function(){try{var cs=getComputedStyle(document.body);var bg=cs.getPropertyValue('--vscode-editor-background').trim();function hexToRgb(h){h=h.replace('#','');if(h.length===3)h=h.split('').map(function(c){return c+c;}).join('');var r=parseInt(h.substr(0,2),16),g=parseInt(h.substr(2,2),16),b=parseInt(h.substr(4,2),16);return {r:r,g:g,b:b};}function parseBg(s){if(!s)return null;var m=s.match(/rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)/i);if(m){return {r:+m[1],g:+m[2],b:+m[3]};}if(/^#/.test(s)){return hexToRgb(s);}return null;}var rgb=parseBg(bg);if(rgb){var L=0.2126*rgb.r+0.7152*rgb.g+0.0722*rgb.b; if(L<140){document.body.classList.add('darklike');}}}catch(e){}})();</script>\n  <div class=\"header\">\n    <h3 style=\"margin:0;\">${opts.mode === 'create' ? 'Create Epic' : 'Edit Epic'}${opts.mode==='edit' ? ` <em style=\"font-weight: normal; opacity: .8;\">#${escapeHtml(String((epic as any)?.ref || (epic as any)?.id || ''))}</em>` : ''}</h3>\n    <div class=\"right\"><label style=\"min-width:auto;\">Assigned to</label><select id=\"assigned\">${userSelect}</select></div>\n  </div>\n  <div class=\"row\"><label>Title</label><input id=\"title\" type=\"text\" value=\"${escapeHtml(title)}\" /></div>\n  <div class=\"row\"><label>Color</label><input id=\"color\" type=\"text\" placeholder=\"#RRGGBB (optional)\" value=\"${escapeHtml(color)}\" /></div>\n  <div class=\"row\"><label></label><div class=\"color-palette\" id=\"palette\"></div></div>\n  <div class=\"row\"><label>Status</label>${statusSelect}</div>\n  <div class=\"row\"><label>Flags</label>\n    <div class=\"flags\" style=\"display:flex; gap:8px;\">\n      <button id=\"teamReq\" title=\"Team requirement\">\uD83D\uDC65</button>\n      <button id=\"clientReq\" title=\"Client requirement\">\uD83D\uDC64</button>\n      <button id=\"blocked\" title=\"Blocked\">\u26D4</button>\n    </div>\n  </div>\n  <div class=\"row\"><label>Tags</label><input id=\"tags\" type=\"text\" placeholder=\"Comma-separated\" value=\"${escapeHtml(tags.join(', '))}\" /></div>\n  <div class=\"row\"><label>Description</label><textarea id=\"desc\" rows=\"6\">${escapeHtml(description)}</textarea></div>\n  ${(() => {\n    const base = opts.siteBaseUrl || '';\n    const slug = opts.projectSlug;\n    let url = '';\n    if (opts.mode === 'edit') {\n      const idPart = String((epic as any)?.ref || (epic as any)?.id || '');\n      if (base) {\n        url = slug ? `${base}/project/${encodeURIComponent(slug)}/epic/${idPart}` : `${base}/epic/${idPart}`;\n      }\n    } else {\n      if (base) {\n        url = slug ? `${base}/project/${encodeURIComponent(slug)}/epics` : `${base}/epics`;\n      }\n    }\n    const linkHtml = url ? ` (<a href=\"${url}\" target=\"_blank\">${escapeHtml(url)}</a>)` : '';\n    return `<div class=\\\"row\\\"><label></label><div class=\\\"note\\\">Comments can be edited in Taiga interface only${linkHtml}</div></div>`;\n  })()}\n  <div class=\"actions\">\n    <button id=\"save\">Save</button>\n    <button id=\"cancel\">Cancel</button>\n  </div>\n  ${opts.mode==='edit' ? `\n  <div class=\"list-header\">\n    <h4 style=\"margin:6px 0;\">Linked User Stories</h4>\n    <div class=\"right\">\n      <input id=\"storySearch\" type=\"text\" placeholder=\"Search...\" />\n      <button id=\"addExisting\">Add existing\u2026</button>\n      <button id=\"createNew\">Create a new user story\u2026</button>\n    </div>\n  </div>\n  <table class=\"list\">\n    <thead><tr>\n      <th class=\"sortable\" data-key=\"id\" style=\"width:90px;\">ID <span class=\"dir\" id=\"dir-id\"></span></th>\n      <th class=\"sortable\" data-key=\"name\">Name <span class=\"dir\" id=\"dir-name\"></span></th>\n      <th class=\"sortable\" data-key=\"assigned\" style=\"width:200px;\">Assigned to <span class=\"dir\" id=\"dir-assigned\"></span></th>\n      <th class=\"sortable\" data-key=\"status\" style=\"width:160px;\">Status <span class=\"dir\" id=\"dir-status\"></span></th>\n    </tr></thead>\n    <tbody id=\"storiesBody\">${renderStoriesRows()}</tbody>\n  </table>\n  <div id=\"cmenu\" class=\"context-menu\"></div>\n  ` : ''}\n  <script nonce=\"${nonce}\">\n  const vscode = acquireVsCodeApi();\n  const users = ${JSON.stringify(users)};\n  const storyStatuses = ${JSON.stringify(storyStatuses)};\n  let __stories = Array.isArray(${JSON.stringify(stories)}) ? ${JSON.stringify(stories)} : [];\n  let __sortKey = 'id';\n  let __sortDir = 'asc';\n  let __search = '';\n  function computeViewRows(){\n    function toRow(s){\n      const dataId = s && s.id;\n      const displayId = (s && (s.ref!=null ? s.ref : s.id));\n      const name = (s && s.subject) || '';\n      const assignedId = (s && (s.assigned_to!=null ? s.assigned_to : s.assignedTo));\n      const assigned = users.find(u=>String(u.id)===String(assignedId)) || {};\n      const assignedName = assigned.fullName || assigned.username || '';\n  const statusId = (s && (s.status && s.status.id || s.status));\n  const st = storyStatuses.find(ss=>String(ss.id)===String(statusId)) || {};\n  const statusName = st.name || (statusId||'');\n  const slug = (st && (st.slug || '')) || '';\n  const low = String(slug || statusName).toLowerCase();\n  const closedByText = /\\b(closed|done|completed|resolved|archived)\\b/.test(low);\n  const isClosed = Boolean(st.is_closed || st.isClosed || closedByText || (s && (s.is_closed || s.closed)));\n  return { dataId, displayId, name, assignedName, statusName, raw: s, closed: isClosed };\n    }\n    let rows = __stories.map(toRow);\n    if (__search && __search.trim().length){\n      const q = __search.trim().toLowerCase();\n      rows = rows.filter(r => String(r.displayId).toLowerCase().includes(q) || String(r.name).toLowerCase().includes(q) || String(r.assignedName).toLowerCase().includes(q) || String(r.statusName).toLowerCase().includes(q));\n    }\n    const cmp = (a,b)=>{\n      // Always push closed rows to the bottom regardless of secondary sort\n      const ca = a.closed ? 1 : 0;\n      const cb = b.closed ? 1 : 0;\n      if (ca !== cb) return ca - cb;\n      const dir = (__sortDir==='asc') ? 1 : -1;\n      switch(__sortKey){\n        case 'id': return ((Number(a.displayId)||0) - (Number(b.displayId)||0)) * dir;\n        case 'name': return String(a.name).localeCompare(String(b.name)) * dir;\n        case 'assigned': return String(a.assignedName).localeCompare(String(b.assignedName)) * dir;\n        case 'status': return String(a.statusName).localeCompare(String(b.statusName)) * dir;\n        default: return 0;\n      }\n    };\n    rows.sort(cmp);\n    return rows;\n  }\n  function renderSortIndicators(){\n    ['id','name','assigned','status'].forEach(k=>{\n      const el = document.getElementById('dir-'+k); if (!el) return; el.textContent = (__sortKey===k) ? (__sortDir==='asc' ? '\u25B2' : '\u25BC') : '';\n    });\n  }\n  function setStories(stories){ __stories = Array.isArray(stories) ? stories.slice() : []; renderTable(); }\n  function renderTable(){\n    const body = document.getElementById('storiesBody'); if (!body) return;\n    const rows = computeViewRows();\n    body.innerHTML = rows.map(r => (\n      '<tr data-id=\"'+r.dataId+'\" class=\"story-row'+(r.closed?' closed':'')+'\">'\n      + '<td style=\"width:90px;\">'+String(r.displayId)+'</td>'\n      + '<td>'+String(r.name)+'</td>'\n      + '<td style=\"width:200px;\">'+String(r.assignedName)+'</td>'\n      + '<td style=\"width:160px;\">'+String(r.statusName)+'</td>'\n      + '</tr>'\n    )).join('');\n    renderSortIndicators();\n  }\n  // Initialize interactions\n  (function(){\n    var search = document.getElementById('storySearch');\n    if (search) search.addEventListener('input', function(){\n      // Use plain JS; avoid TS-only casts in webview\n      __search = (search && search.value) ? search.value : '';\n      renderTable();\n    });\n    var ths = document.querySelectorAll('th.sortable'); ths.forEach(function(th){ th.addEventListener('click', function(){\n      var key = th.getAttribute('data-key');\n      if (!key) return;\n      if (__sortKey === key) { __sortDir = (__sortDir==='asc') ? 'desc' : 'asc'; }\n      else { __sortKey = key; __sortDir = 'asc'; }\n      renderTable();\n    }); });\n    renderTable();\n  })();\n  window.addEventListener('message', function(e){ var msg=e.data||{}; if (msg.type==='setLinkedStories'){ setStories(msg.stories||[]); }});\n  var addBtn = document.getElementById('addExisting'); if (addBtn) addBtn.addEventListener('click', function(){ vscode.postMessage({ type: 'addExistingStory' }); });\n  var createBtn = document.getElementById('createNew'); if (createBtn) createBtn.addEventListener('click', function(){ vscode.postMessage({ type: 'createNewStory' }); });\n  // Context menu for story rows\n  var cmenu = document.getElementById('cmenu');\n  document.addEventListener('contextmenu', function(ev){\n    var row = ev.target && (ev.target.closest ? ev.target.closest('.story-row') : null);\n    if (row) {\n      ev.preventDefault();\n      var id = row.getAttribute('data-id');\n      if (cmenu) {\n        cmenu.innerHTML = '';\n        function add(label,type){ var b=document.createElement('button'); b.textContent=label; b.addEventListener('click', function(){ cmenu.style.display='none'; vscode.postMessage({ type: type, storyId: Number(id) }); }); cmenu.appendChild(b); }\n        add('Edit the user story\u2026','editStory');\n        add('Remove the user story from the epic','removeStory');\n        add('Delete the user story','deleteStory');\n        cmenu.style.left = ev.pageX + 'px'; cmenu.style.top = ev.pageY + 'px'; cmenu.style.display = 'block';\n      }\n    } else { if (cmenu) cmenu.style.display = 'none'; }\n  });\n  document.addEventListener('click', function(){ if (cmenu) cmenu.style.display='none'; });\n  const taigaColors = ['#ecf0f1','#1abc9c','#2ecc71','#3498db','#9b59b6','#34495e','#16a085','#27ae60','#2980b9','#8e44ad','#2c3e50','#f1c40f','#e67e22','#e74c3c','#95a5a6','#f39c12','#d35400','#c0392b','#7f8c8d'];\n  const palette = document.getElementById('palette');\n  const colorInput = document.getElementById('color');\n  const statusInput = document.getElementById('status');\n  const teamBtn = document.getElementById('teamReq');\n  const clientBtn = document.getElementById('clientReq');\n  const blockedBtn = document.getElementById('blocked');\n  const tagsInput = document.getElementById('tags');\n  // initialize flags\n  let teamRequirement = ${teamReq ? 'true' : 'false'};\n  let clientRequirement = ${clientReq ? 'true' : 'false'};\n  let isBlocked = ${blocked ? 'true' : 'false'};\n  function renderFlag(btn, active){ btn.style.opacity = active ? '1' : '0.5'; }\n  renderFlag(teamBtn, teamRequirement); renderFlag(clientBtn, clientRequirement); renderFlag(blockedBtn, isBlocked);\n  teamBtn.addEventListener('click', ()=>{ teamRequirement = !teamRequirement; renderFlag(teamBtn, teamRequirement); });\n  clientBtn.addEventListener('click', ()=>{ clientRequirement = !clientRequirement; renderFlag(clientBtn, clientRequirement); });\n  blockedBtn.addEventListener('click', ()=>{ isBlocked = !isBlocked; renderFlag(blockedBtn, isBlocked); });\n  function renderPalette(){\n    palette.innerHTML = '';\n    const current = (colorInput.value||'').toLowerCase();\n    taigaColors.forEach(c => {\n      const el = document.createElement('span'); el.className = 'swatch' + (current===c.toLowerCase() ? ' selected' : ''); el.style.background = c; el.title = c; el.addEventListener('click', ()=>{ colorInput.value = c; renderPalette(); }); palette.appendChild(el);\n    });\n  }\n  colorInput.addEventListener('input', renderPalette);\n  renderPalette();\n  document.getElementById('save').addEventListener('click', () => {\n    vscode.postMessage({ type: 'save', payload: {\n      title: (document.getElementById('title')).value,\n      color: (document.getElementById('color')).value,\n      description: (document.getElementById('desc')).value,\n      status: statusInput.value,\n      team_requirement: teamRequirement,\n      client_requirement: clientRequirement,\n      blocked: isBlocked,\n      tags: (tagsInput.value||'')\n        .split(',')\n        .map(s=>s.replace(/,+$/, '').trim())\n        .filter(s=>s.length>0),\n      assigned_to: (document.getElementById('assigned')).value\n    }});\n  });\n  document.getElementById('cancel').addEventListener('click', () => vscode.postMessage({ type: 'cancel' }));\n  </script>\n  </body></html>`;\n}\n\nfunction escapeHtml(s: string){ return s.replace(/[&<>\"']/g, (c)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;' }[c] as string)); }\nfunction getNonce(){ let t=''; const p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for(let i=0;i<32;i++) t+=p.charAt(Math.floor(Math.random()*p.length)); return t; }\nasync function handleTokenError(service: any, fallbackMsg: string) {\n  try {\n    const api = (service as any)['api'];\n    const test = await api.get('/users/me');\n    if (test?.error && test.error.category === 'auth') {\n      const pick = await vscode.window.showWarningMessage('Your Taiga session has expired. Reconnect?', 'Reconnect');\n      if (pick === 'Reconnect') { await vscode.commands.executeCommand('taiga.connect'); }\n    } else {\n      vscode.window.showErrorMessage(fallbackMsg);\n    }\n  } catch {\n    vscode.window.showErrorMessage(fallbackMsg);\n  }\n}\n", "import * as vscode from 'vscode';\nimport { SprintService } from '../services/sprintService';\nimport { Sprint } from '../models/types';\n\nexport class SprintEditor {\n  static async openForCreate(sprintService: SprintService, projectId: number) {\n    const panel = vscode.window.createWebviewPanel('taigaSprintEditor', 'New Sprint', vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n  const nonce = getNonce();\n  const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n  panel.webview.html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\" /><meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\"><style>:root{color-scheme:light dark}body{font-family:var(--vscode-font-family);padding:12px;background:var(--vscode-editor-background);color:var(--vscode-foreground)}.loading{opacity:.8;font-style:italic}</style></head><body><div class=\"loading\">Loading\u2026</div></body></html>`;\n    panel.webview.html = renderHtml(csp, nonce, { mode: 'create' });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { name, start, end } = msg.payload || {};\n        const created = await sprintService.createSprint({ projectId, name, startDate: start || undefined, endDate: end || undefined });\n        if (created) { vscode.window.showInformationMessage('Sprint created'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll'); }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n\n  static async openForEdit(sprintService: SprintService, sprint: Sprint) {\n    const panel = vscode.window.createWebviewPanel('taigaSprintEditor', `Edit Sprint: ${(sprint as any).name || sprint.id}`, vscode.ViewColumn.Active, { enableScripts: true });\n    const ext = vscode.extensions.getExtension('antpavlenko.taiga-mcp-extension');\n    if (ext) panel.iconPath = {\n      light: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-light.svg'),\n      dark: vscode.Uri.joinPath(ext.extensionUri, 'media/taiga-emblem-dark.svg'),\n    };\n  // Show loading placeholder while fetching\n  const nonceLoading = getNonce();\n  const cspLoading = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonceLoading}';`;\n  panel.webview.html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\" /><meta http-equiv=\"Content-Security-Policy\" content=\"${cspLoading}\"><style>:root{color-scheme:light dark}body{font-family:var(--vscode-font-family);padding:12px;background:var(--vscode-editor-background);color:var(--vscode-foreground)}.loading{opacity:.8;font-style:italic}</style></head><body><div class=\"loading\">Loading\u2026</div></body></html>`;\n  // Fetch full sprint to ensure fields like description (if any in custom) are present\n    const full = await (async () => { try { return await sprintService.getSprint(sprint.id) || sprint; } catch { return sprint; } })();\n    const nonce = getNonce();\n    const csp = `default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}';`;\n    panel.webview.html = renderHtml(csp, nonce, { mode: 'edit', sprint: full });\n    panel.webview.onDidReceiveMessage(async (msg) => {\n      if (msg.type === 'save') {\n        const { name, start, end, closed } = msg.payload || {};\n        const updated = await sprintService.updateSprint(sprint.id, {\n          name: name ?? null,\n          startDate: start ?? null,\n          endDate: end ?? null,\n          closed: !!closed,\n        });\n        if (updated) { vscode.window.showInformationMessage('Sprint updated'); panel.dispose(); vscode.commands.executeCommand('taiga.refreshAll'); }\n      }\n      if (msg.type === 'cancel') panel.dispose();\n    });\n  }\n}\n\nfunction renderHtml(csp: string, nonce: string, opts: { mode: 'create'|'edit'; sprint?: Sprint }) {\n  const s = opts.sprint as any;\n  const name = s?.name || '';\n  const start = s?.estimated_start || s?.startDate || '';\n  const end = s?.estimated_finish || s?.endDate || '';\n  const closed = !!s?.closed;\n  return `<!DOCTYPE html>\n  <html><head><meta charset=\"UTF-8\" />\n  <meta http-equiv=\"Content-Security-Policy\" content=\"${csp}\">\n  <style>\n  :root { color-scheme: light dark; }\n  body{font-family:var(--vscode-font-family); padding:12px; background: var(--vscode-editor-background); color: var(--vscode-foreground);}\n  .row{display:flex; gap:8px; align-items:center; margin:6px 0;}\n  input[type=text], input[type=date]{width:100%; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border, transparent); padding: 4px 6px; border-radius: 2px;}\n  .actions{display:flex; gap:8px; margin-top:12px;}\n  button{ background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border, transparent); border-radius: 2px; padding: 4px 10px; }\n  button:hover{ background: var(--vscode-button-hoverBackground); }\n  label{ min-width: 120px; }\n  </style></head>\n  <body>\n  <div class=\"row\"><label>Name</label><input id=\"name\" type=\"text\" value=\"${escapeHtml(name)}\" /></div>\n  <div class=\"row\"><label>Start date</label><input id=\"start\" type=\"date\" value=\"${escapeHtml(start)}\" /></div>\n  <div class=\"row\"><label>End date</label><input id=\"end\" type=\"date\" value=\"${escapeHtml(end)}\" /></div>\n  ${opts.mode === 'edit' ? '<div class=\"row\"><label>Closed</label><input id=\"closed\" type=\"checkbox\" '+(closed?'checked':'')+' /></div>' : ''}\n  <div class=\"actions\">\n    <button id=\"save\">Save</button>\n    <button id=\"cancel\">Cancel</button>\n  </div>\n  <script nonce=\"${nonce}\">\n    const vscode = acquireVsCodeApi();\n    document.getElementById('save').addEventListener('click', () => {\n      vscode.postMessage({ type: 'save', payload: {\n        name: (document.getElementById('name')).value,\n        start: (document.getElementById('start')).value,\n        end: (document.getElementById('end')).value,\n        closed: (document.getElementById('closed')||{checked:false}).checked,\n      }});\n    });\n    document.getElementById('cancel').addEventListener('click', () => vscode.postMessage({ type: 'cancel' }));\n  </script>\n  </body></nhtml>`;\n}\n\nfunction escapeHtml(s: string){ return s.replace(/[&<>\"']/g, (c)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;' }[c] as string)); }\nfunction getNonce(){ let t=''; const p='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for(let i=0;i<32;i++) t+=p.charAt(Math.floor(Math.random()*p.length)); return t; }\n"],
  "mappings": "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",
  "names": ["n", "escapeHtml", "getNonce", "vscode", "points", "TaskService", "renderHtml", "escapeHtml", "getNonce", "handleTokenError", "renderLoadingHtml", "vscode", "handleTokenError", "renderHtml", "escapeHtml", "getNonce", "renderLoadingHtml", "vscode", "vscode", "vscode", "vscode", "keys", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "vscode", "getNonce", "renderHtml", "handleTokenError", "StoryEditor", "escapeHtml", "assignedId", "vscode", "getNonce", "renderHtml", "escapeHtml", "TaskEditor", "IssueEditor"]
}
